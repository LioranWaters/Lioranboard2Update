=================================
Building LioranBoard 2.x Extensions
=================================
---------------------------------
- 1. Overview and Prerequisites -
---------------------------------

This document will provide an introduction to creating custom LioranBoard 2.x (LB2) extensions.  Creating new extension files requires knowledge of JavaScript programming, and a strong understanding of LioranBoard variable types and commands.  Manual receiver protocol usage and executing hooks from receiver requests are outside of the scope of this introductory documentation.

All LioranBoard 2.x extensions are Microsoft Windows format text files saved with an .lb2 file extension.  It is highly recommended to review other extensions to get a better idea on the different sections of the extension file and how they work.  You can also copy and modify the basic extension example or use the empty template content from section 2 below into a new .lb2 file to get started.

Extensions written for LioranBoard 1.x are not compatible with the LioranBoard 2.x Receiver and must be upgraded/converted.  Developers for LioranBoard 1.x extensions should view the \transmitter\What changed.txt file in addition to this document for an overview on how to upgrade 1.x extensions to work with LB2.  

For questions or issues creating LB2 extensions, visit the official LioranBoard Discord server (https://discord.gg/dXez8Zh) and post in the Extension section #development channel.  Please remember that there are a limited number of users on the Discord server that can assist with extension development and that they are all volunteers.

------------------------------------------
- 2. Extension Template File and Example -
------------------------------------------

See the \transmitter\template.lb2 file under the main LioranBoard 2 folder for an empty extension template.

The \transmitter\format_number_example.lb2 file is a functional extension example for LioranBoard 2.x that will convert a real value to a regional formatted string using JavaScript.  The extension creates a new "Format Number" command and deck with an example button after import.

The example extension demonstrates the usage of transmitter tab commentary, how to create a new command with two fields using a helper function, returning a value back to the receiver into a specified variable name using a helper function, and creating a new receiver deck after import.

------------------------------
- 3. Extension File Sections -
------------------------------

[extension_name]

This section contains the name of the extension and is what will be displayed to users as the extension name in the transmitter and receiver.  Alphanumeric characters and spaces are supported.

[extension_info]

You can add any text content here or leave it empty, it is not used by the transmitter or receiver.  Version and author name information is good information to include in this section.

[insert_external]

The content in this section supports HTML format text content and will display on the extension's tab in the transmitter.  This section may be left empty if desired.

[insert_command]

Defines the command or set of commands for the button editor in the LioranBoard receiver application.  Use the LB.extCommand helper function outlined in the transmitter documentation to create a new command:

https://github.com/LioranBoard/LioranBoard-2-Transmitter#helper-functions

An extension can add more than one LB.extCommand block to create multiple button commands in the receiver.  Each LB.extCommand block sets the name of a new extension command in the receiver, the command's color, height, and a JavaScript object defining the set of fields/boxes to show in the receiver UI for the command.

[insert_hook]

This section bridges the command name(s) and data from the receiver and the JavaScript function(s) and parameters to execute.  This section must include a JavaScript case statement, or hook, for each LB.extCommand block defined in the [insert_command] section.

Case matching values (aka hook names) must match the button command names from the [insert_command] section exactly, including case sensitivity and spaces.  The case statement code block should contain the JavaScript function to call defined in the [insert_script] section of the extension.  All function parameters used must include the object prefix of "LioranBoardJSON." (Without the quotes) and parameter names that align with boxVariable values in the order defined within the LB.extCommand blocks of the [insert_command] section.

[insert_script]

The main extension behavior code goes into this section via standard JavaScript function definitions.  Function and property names must comply with JavaScript naming conventions.  The parameter order must match the order defined in the matching [insert_hook] case statement.  It is not required, although strognly recommended, that the function parameter names align with the names used in the [insert_hook] and [insert_command] sections for clarity.  

Extension code can use the LioranBoard websocket library to send and receive data to the receiver.  It is highly recommended to use the helper functions from the transmitter documentation to perform these actions:

https://github.com/LioranBoard/LioranBoard-2-Transmitter#helper-functions

[insert_over]

This section allows the extension to install a new deck into the LB2 receiver.  Developers can create and save the deck content in the receiver UI, right click the deck, select "Export JSON", and paste the JSON text content into this section.  LB2 users installing the extension will receive a prompt to install the deck content as defined in this section.

The installed decks can use commands created in the same extension, or any other extension.  However, if the user uninstalls an extension used by the deck defined in this section, the related commands will not work in the receiver.  This may cause unexpected behavior or cause the receiver to crash.

---------------------------------
- 4. Troubleshooting Extensions -
---------------------------------

Extension files install into the main transmitter HTML document.  It is important to note that syntax errors or JavaScript code issues will not prevent an extension from installing, although they may cause the transmitter or receiver to act strangely or not work at all.  During extension development and testing, it is highly recommended to close out any transmitter docks in OBS Studio and open the transmitter HTML file directly in a local browser window outisde of OBS until testing is complete.

From the browser window, errors from extensions will output to the browser developer console, usually accessed by pushing F12 in the browser window and selecting the "Console" tab of the developer tools.  Extensions support output to console.log within the [insert_script] and [insert_hook] code for testing or troubleshooting purposes and also display in the same browser console.

If code changes to the installed extension are required, you can re-upload corrected extension file as long as the extension name does not change; the receiver will prompt to replace the existing extension content.  Normally the transmitter will automatically restart after installing an extension via the receiver.  However, errors may prevent the automatic transmitter restart.  If this is the case, manually reload the transmitter by either refreshing the browser window or closing and reopening the OBS Studio transmitter dock for the new extension code to take effect.
