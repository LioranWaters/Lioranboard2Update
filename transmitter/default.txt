<!--For Extension info, read How to make extensions.txt in Extension folder-->
<!--Transmitter V5.09-->
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="title" content="LioranBoard Transmitter">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="description" content="LioranBoard component which allows LioranBoard to connect to Twitch and its extensions.">
<meta name="keywords" content="LioranBoard, Transmitter, Twitch, Stream">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="language" content="English">
<title>LioranBoard Transmitter</title>
<link rel="shortcut icon" type="image/x-icon" href="https://raw.githubusercontent.com/LioranBoard/LioranBoard-2-Transmitter/main/favicon.ico"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/christinna9031/LioranBoard-Files@main/lib/bootstrap.min.css">
<link href='https://fonts.googleapis.com/css?family=Lato:400,700' rel='stylesheet' type='text/css'>
<style>
body {
  font-family: 'Lato', sans-serif;
}
h1 {
font-size: calc(1.2em + 1vw);
}
a {
  color: #ffac7c;
  text-decoration: underline;
}
a:hover {
  color: #ff6810;
  text-decoration: underline;
}
.tslCollapse, .tslCollapse:hover, .tslCollapse a {
  text-decoration: none;
  color: #FFFFFF;
}
.tslCollapse.collapsed:before {
  content:'Show Options \01F847' ;
  width:15px;
}
.tslCollapse:before {
  content:'Hide Options \01F845' ;
  width:15px;
}
.LBTestTriggers .form-check-input[type=checkbox] {
  vertical-align: text-bottom;
}
#footer .tslCollapse.collapsed:before {
  content:'Show Installed Extensions \01F847' ;
  width:15px;
}
#footer .tslCollapse:before {
  content:'Hide Installed Extensions \01F845' ;
  width:15px;
}

#LBreceiverlog, #LBpubsublog {
  background:rgb(10, 11, 26);
  padding:5px 15px;
  display:block;
  position: relative;
  float: left;
  text-align: left;
  max-height: 50%;
  overflow-y: auto;
}

#debugLogContent, #debugLog {
  border:none;
  background-color:rgba(0,0,0,0);
  box-shadow:none;
}
#debugLog .nav-link {
  padding: .2rem 1rem;
}
#LBPubSub, #LBreceiver {
  overflow: hidden;
  padding:5px;
  margin:2px;
  padding: 1px 
}
samp {
  width: 200px;
  word-break: break-all;
  white-space: normal;
}

input{
 padding:0px;
 margin:1px 1px
}
button{
 padding:2px 5px;
 margin:3px 0;
 box-shadow:2 2px #c5c5c5
}
button:active{
 background-color:#797979;
 color:#fff;
 box-shadow:0 0 rgb(223, 223, 223);
 transform:translateY(1px)
}
.nav {
  padding-left: 0;
  margin-bottom: 0;
}
.nav-pills .nav-link {
  font-family: Arial;
  padding: .4em .6em .1em .6em;
  margin: 2px 1px 0px 1px!important;
  background: rgb(175,177,184);
  background-color: linear-gradient(0deg, rgba(175,177,184,1) 15%, rgba(203,203,213,1) 61%);
  font-weight: bold;
  color:rgb(31, 32, 54);
  border-radius: 5px 5px 0px 0px;
  text-shadow: 0px 1px 2px rgb(195, 195, 195);
  transition: 0.01s;
}
.nav-pills > li > .nav-link.active {
   background-image: linear-gradient(to bottom, #E28B3B, #B96C23);
   color: rgb(255, 255, 255);
   border: 1px solid #8F8C8C;
   text-shadow: 1px 1px 3px rgb(0 0 0 / 100%);
 }
 
 .tab-content {
   background-color: rgba(39, 55, 110, 0.5);
   box-shadow: 0.5rem 0.5rem 0.5rem #00000080;
   min-height:50px;
   width:100%;
   border-radius:3px;
   overflow:hidden;
   padding:20px;
 }
 .draggable-source--is-dragging {
   opacity: 0;
 }

@media (max-width: 576px) {
  .nav-pills .nav-link {
      border-radius: 5px 5px 0px 0px;
      font-weight:bold;
      padding: .2em .4em .1em .4em;
      font-size: 0.92em 
 }
  button{
     font-size:0.93em;
      padding:2px 5px;
     margin:3px 0;
     box-shadow:2 2px #c5c5c5
 }
 button:active{
     background-color:#797979;
     color:#fff;
     box-shadow:0 0 rgb(223, 223, 223);
     transform:translateY(1px)
 }
}

.notabs>.tab-pane {
  display: block !important;
  opacity: 1 !important;
}
.notabs button, .notabs input{
 color:#fff;
 background-color:#4c4c4c;
 border-color:#464546
}
.connected{
 color:#4ad84a
}
.disconnected{
 color:#fb4848
}

</style>
</head>
<body>
<div class="container">
<h1 class="text-center">LioranBoard Transmitter </h1>
<!-- Connection Info -->
<div class="row justify-content-center">
  <div class="col col-auto">
    <svg id="toclient_circle" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-circle-fill d-md-none me-1" viewBox="0 0 16 16">
        <circle cx="8" cy="8" r="8"/>
      </svg>
    <span>LioranBoard</span><span class="d-none d-md-inline-flex me-1">: </span><span id="toclient" class="disconnected d-none d-md-inline-flex">Not connected.</span>
  </div>
  <div class="col col-auto">
    <svg id="topubsub_circle" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-circle-fill d-md-none me-1" viewBox="0 0 16 16">
        <circle cx="8" cy="8" r="8"/>
      </svg>
    <span>Pubsub</span><span class="d-none d-md-inline-flex me-1">: </span><span class="disconnected d-none d-md-inline-flex" id="topubsub">Not connected.</span>
  </div>
</div> <br>
<!--Tabs -->
<div class="row justify-content-center g-0">
    <ul class="nav nav-pills mb-0" id="extensions-tab" role="tablist">
</div>  
 <!-- Tab Content -->
 <div class="tab-content" id="extensions-tabContent">
<div class="tab-pane" id="content-basic" role="tabpanel" title="Status" data-type="default">
  <div class='row pt-3'>
    <h5>Transmitter Connection</h5>
    <div class="col">
    <div class="row">
      <label for="inputPassword" class="col-sm-5 col-form-label">IP Address:</label>
      <div class="col-sm-4 w-auto">
        <input type="text" id="nIPbox" name="nIPbox" value='127.0.0.1' class="form-control form-control-sm" >
      </div>
    </div>
    <div class="row">
      <label for="inputPassword" class="col-sm-5 col-form-label">Port:</label>
      <div class="col-sm-4 w-auto">
        <input type="number" min="0" max="65535" id="nPortBox" name="nPortBox" value=9425 class="form-control form-control-sm">
      </div>
    </div>
    <div class="row">
      <label for="inputPassword" class="col-sm-5 col-form-label">Password (optional):</label>
      <div class="col-sm-4 w-auto">
        <input id="nPassBox" type="password" name="nPassBox" size="20" value='' class="form-control form-control-sm">
      </div>
    </div>
    <div class="mt-1 row">
      <button type="button" id="cnctbutton" class="btn btn-primary btn-sm mb-2 w-auto ms-3" onclick="connectbutton()">Connect</button>
    </div>
    </div>
 </div>
  <div class='row pt-3'>
     <h5>Appearance</h5>
     <div class="col col-md-auto"><button type="button" class="btn btn-primary btn-sm mb-2 w-auto me-2" onclick="TSLNoTabs()">No Tabs</button><button type="button" class="btn btn-primary btn-sm mb-2 w-auto" onclick="TSLTabs()">Show Tabs</button></div>
  </div>
<div class='row pt-3 d-block'>
    <h5>Message Logging</h5>
    <div class='pl-5 ml-5'>
       <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="dbgReceiver" onclick="LBDebugLog(this)" >
          <label class="form-check-label"for="flexSwitchCheckDefault">LioranBoard</label>
       </div>
       <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="dbgPubsub" onclick="LBDebugLog(this)">
          <label class="form-check-label" for="flexSwitchCheckDefault">PubSub</label>
       </div>
       <ul class="nav nav-tabs mt-3" id="debugLog" role="tablist">
          <li class="nav-item" role="presentation">
             <button class="nav-link active" id="LBreceiver-tab" data-bs-toggle="tab" data-bs-target="#LBreceiver" type="button" role="tab" aria-controls="LBreceiver" aria-selected="true">LioranBoard</button>
          </li>
          <li class="nav-item" role="presentation">
             <button class="nav-link" id="LBPubSub-tab" data-bs-toggle="tab" data-bs-target="#LBPubSub" type="button" role="tab" aria-controls="LBPubSub" aria-selected="false">PubSub</button>
          </li>
       </ul>
       <div class="tab-content p-0 " id="debugLogContent">
          <!--LB Receiver Log-->
          <div class="tab-pane fade show active" id="LBreceiver" role="tabpanel" aria-labelledby="LBreceiver-tab" >
             <div id="LBreceiverlog" class="col col-10 text-wrap">Logging is disabled.</div>
          </div>
          <!--LB Pubsub Log-->
          <div class="tab-pane fade" id="LBPubSub" role="tabpanel" aria-labelledby="LBPubSub-tab">
             <div id="LBpubsublog" class="col col-10 text-wrap">Logging is disabled.</div>
          </div>
       </div>
    </div>
 </div>
</div>
<!--Your external script will be inserted here-->
<!--<script src="example.js"></script>-->
<!--INSERT PART 1-->
 
<!--Twitch Triggers-->
<div class="tab-pane" id="content-triggers" role="tabpanel" title="Twitch Triggers" data-type="default">
   <form id="LBTestTwitchFollow" class="LBTestTriggers">
      <button type="submit" class="btn btn-primary btn-sm me-1">Test Follower</button>
   </form>
    <form id="LBTestTwitchSubs" class="LBTestTriggers">
    <button type="submit" class="btn btn-primary btn-sm me-1">Test Sub</button>
    <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidesubs" role="button" aria-expanded="false" aria-controls="hidesubs"></a>  
    <div class="collapse" id="hidesubs"> 
       <input type="radio" class="form-check-input" id="tier1" name="tier" value="Tier 1" checked>
       Tier 1
       <input type="radio" class="form-check-input" id="tier2" name="tier" value="Tier 2">
       Tier 2
       <input type="radio" class="form-check-input" id="tier3" name="tier" value="Tier 3" >
       Tier 3
       <input type="radio" class="form-check-input" id="prime"name="tier" value="Prime" onclick="CheckUncheckSubGift(this)" >
       Prime <br>
       <input type="checkbox" class="form-check-input" id="subgift" value="subgift" onclick="CheckUncheckSubGift(this)">
       SubGift
       <input type="checkbox" class="form-check-input" id="anongift" value="anongift" onclick="CheckUncheckSubGift(this)">
       AnonGift 
       <input type="number" min="0" max="100" id="submonths" value=1> Months <br>
       Message:	
       <input type="text" id="submessage" size="20">
    </div>
    <div>
   </form>
   <form id="LBTestTwitchSubGift" class="LBTestTriggers">
       <button type="submit" class="btn btn-primary btn-sm me-1">Test Subs Gift Amount</button>
       Amount:
       <input type="number" min="1" max="99" id="subGiftAmount" value=1> 
    </div>
   </form>
   <form id="LBTestTwitchBits" class="LBTestTriggers">
    <button type="submit" class="btn btn-primary btn-sm me-1">Test Bits</button>
    <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidebits" role="button" aria-expanded="false" aria-controls="hidebits"></a>
    <div class='collapse' id="hidebits"> 
       Amount of bits:
       <input type="number" min="0" max="999" id="bitsamount" value=10>
       Total bits: 	
       <input type="number" min="0" max="999" id="bitstotal" value=100><br/>
       Message:	
       <input type="text" id="bitsmessage" size="20" style="margin:5px 0px;" value='Hello World!'>
    </div>
   </form>
   <form id="LBTestTwitchPoints" class="LBTestTriggers">
    <div><button type="submit" class="btn btn-primary btn-sm me-1">Test Channel Points</button> 
       <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidepoints" role="button" aria-expanded="false" aria-controls="hidebits"></a>
    </div>
    <div class="collapse" id="hidepoints" >
       Redeem Name:
       <input type="text" id="channelPointsName" size="10" style="margin:5px 0px" value="Test Reward">	<input type="checkbox" class="form-check-input" id="channelPointsInput"> User Input Required <br>
       Redeem Message:	
       <input type="text" id="channelPointsMsg" size="20">	<br>
       Redeem Cost:	
       <input type="number" min="0" max="9999" id="channelPointsCost" size="5" value=50>	
    </div>
   </form>
   <form id="LBTestTwitchRaid" class="LBTestTriggers">
    <div><button type="submit" class="btn btn-primary btn-sm me-1">Test Raid</button>
       Amount:
       <input type="number" min="0" max="999" id="raidAmount" value=5> 
    </div>
   </form>
   <form id="LBTestTwitchHost" class="LBTestTriggers">
    <div><button type="submit" class="btn btn-primary btn-sm me-1">Test Host</button>
       Amount:
       <input type="number" min="0" max="999" id="hostamount" value=5>
    </div>
   </form>
   <form id="LBTestTwitchChat" class="LBTestTriggers">
    <div><button type="submit" class="btn btn-primary btn-sm me-1">Test Chat Message </button> 	
       <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#hidechatmsg" role="button" aria-expanded="false" aria-controls="hidechatmsg"></a>
    </div>
    <div class="collapse" id="hidechatmsg">
       Username: <input type="text" id="chatName" size="10" value="Lioran"> <br> Message: <input type="text" id="chatMsg" size="20" style="margin:5px 0px"; value="Hello World">	<input type="checkbox" class="form-check-input" id="chatFirstTime"> 1st <br>
       <input type="checkbox" class="form-check-input" id="chatBroadcaster"> Broadcaster <input type="checkbox" class="form-check-input" id="chatMod"> Mod <input type="checkbox" class="form-check-input" id="chatSub"> Subscriber <input type="checkbox" class="form-check-input" id="chatVip"> VIP <input type="checkbox" class="form-check-input" id="chatFounder"> Founder <br>
       Subscriber Tier: 
       <select id="chatMsgSubTier">
          <option value="1">1</option>
          <option value="2">2</option>
          <option value="3">3</option>
       </select>
       Month:  <input type="number" min=0 max=12 maxlength="2" oninput="javascript: if (parseInt(this.value) > parseInt(this.max)) this.value = this.max;" id="chatMsgSubMonth" value=1>
    </div>
   </form>
  </div>
</div>
<div class="row justify-content-center mt-3 px-2 mb-5" id="footer"> <a class="tslCollapse collapsed" data-bs-toggle="collapse" href="#installedextensions" role="button" aria-expanded="false" aria-controls="installedextensions"></a>
  <span class='collapse' id="installedextensions"></span>
  <span id ='extensions-tab-buttons' class="mt-2">
  <button id="extensionsshow" class="btn btn-primary btn-sm me-1">Show All Tabs</button> <button id="extensionshide" class="btn btn-primary btn-sm me-1">Hide All Tabs</button> <button id="extensionsresetorder" class="btn btn-primary btn-sm me-1">Reset Tab Order</button> <button onclick="location.reload()" class="btn btn-primary btn-sm me-1">Refresh</button></span>
</div>


</div>
</body>
<script>
/** LB2 Helper Functions
 * You can call them with LB.{helperfunction}
 * Use promises if you want to get a reply back from LB
 * No promise example: LB.setVariable(myVariable, 'some value', 'someButtonID')
 * Promise example: LB.getVariable(myVariable, 'someButtonID').then(reply=>console.log(reply))
 */
function LBCommands() {
  const LBSendCommand = {
    /**
     * Get a variable from LB
     * @param {string} name - name of the variable
     * @param {string} buttonId - button ID for local variable, default = global variable
     */
    async getVariable(name, buttonId = 'global') {
      return sendToLB('GetVariable', {
        Variable: name,
        ButtonId: buttonId,
      });
    },

    /**
     * Set a variable in LB
     * @param {string} name - name of the variable
     * @param {(string|number|object|array|null)} value - new value of the variable
     * @param {string} buttonId - button ID for local variable, default = global variable
     */
    async setVariable(name, value, buttonId = 'global') {
      return sendToLB('SetVariable', {
        Variable: name,
        Value: value,
        ButtonId: buttonId,
      });
    },

    /**
     * Send a popup message to LB
     * @param {string} msg - message to send
     */
    async popUp(msg) {
      return sendToLB('PopupMessage', {
        Message: msg,
      });
    },

    /**
     * Send a yellow notification message to LB
     * @param {string} msg - message to send
     */
    async alert(msg) {
      return sendToLB('AlertMessage', {
        Message: msg,
      });
    },

    /**
     * send extension command to LB
     * @param {string} name - name of the extension command
     * @param {string} color - box color, accepts hex/dec colors (include # for hex), default 3355443
     * @param {string} height - height of the box in pixels, 52 for regular or 80 for resizable box, default 52
     * @param {Object} boxes
     * - one object per box, key = boxVariable, value = array of box params
     * - boxVariable = variable to save the box value under
     * - boxName = name of the box shown in the user interface
     * - boxType = type of the box, 0 = resizable, 2 = checkbox (true/false), 14 = regular box, 15 = variable box, 18 = select box, see extension guide for more
     * - defaultValue = default value of the variable
     * - (optional) sizeModifier = horizontal box size, 1 is normal
     * - (optional) [] selectOptions = array of options for the user to select (when using Select box type)
     * @param {[boxName: string, boxType: number, defaultValue: (string | number), sizeModifier: (number|undefined), selectOptions: Array|undefined]} boxes.boxVariable
     * */
    async extCommand(name, color = 3355443, height = 52, boxes) {
      const ext = new LBConstructExtCommand(name, color, height);

      for (const [key, value] of Object.entries(boxes)) {
        ext.addBox(key, value);
      }

      return sendToLB('SendExtensionCommands', {
        Data: [ext],
      });
    },

    /**
     * Close LioranBoard connection to Transmitter.
     */
    async close() {
      return sendToLB('Close');
    },

    /**
     * Get deck and button updates
     * @param {boolean} enabled - enable or disable updates
     */
    async stayInformed(enabled) {
      return sendToLB('SetStayInformed', {
        Enabled: enabled,
      });
    },

    /**
     * Request an array of all decks
     * - Replies with an array ["Deck1 Name","Unique ID",crc32,"Deck2 Name","Unique ID",crc32,...]
     * - Use crc32 value to verify deck you saved localy is the same
     */
    async getDeckList() {
      return sendToLB('GetDeckList');
    },

    /**
     * Request a deck params
     * @param {string} id - Unique deck ID retrieved from getDeckList
     * - Replies with an object containing a full deck
     */
    async getDeck(id) {
      return sendToLB('GetDeck', {
        UniqueId: id,
      });
    },

    /**
     * Retrieve an image in base64
     * @param {string} fileName - image file name without the path (image.png)
     * - Replies with an object containing the Base64 string of the image
     */
    async getImage(fileName) {
      return sendToLB('GetImage', {
        FileName: fileName,
      });
    },

    /**
     * Retrieves CRC32 of a file
     * @param {string} fileName - file name without the path (image.png)
     */
    async getSum(fileName) {
      return sendToLB('GetSum', {
        Name: fileName,
      });
    },

    /**
     * Retrieves all currently active buttons
     * - Replies with an array of button param objects
     */
    async getActiveButtons() {
      return sendToLB('GetOngoingButtons');
    },

    /**
     * Retrieves params of all linked Twitch accounts
     */
    async getTwitchList() {
      return sendToLB('GetTwitchList');
    },

    /**
     * Sends a trigger
     * @param {number} type - type of trigger
     * - trigger types: 0 Twitch chat, 1 Twitch Sub, 2 Twitch Gift, 3 Twitch redeem
     * 4 Twitch Raid, 5 Twitch Bits, 6 Twitch Follower, 7 Hotkey
     * 8 Timer, 9 OBS Trigger, 10 lioranboard, 11 twitch moderation, 12 extension trigger
     * @param {object} data - whatever data is required for the trigger, see manual
     */
    async trigger(type, data) {
      return sendToLB('SendTrigger', {
        Type: type,
        Data: data,
      });
    },

    /**
     * Triggers a button
     * @param {string} id - button ID to trigger
     */
    async triggerButton(id) {
      return sendToLB('TriggerButton', {
        ButtonId: id,
      });
    },

    /**
     * Releases a button
     * @param {string} id - button ID to release
     */
    async releaseButton(id) {
      return sendToLB('ReleaseButton', {
        ButtonId: id,
      });
    },

    /**
     * Modifies a button
     * @param {string} id - button ID to modify
     * @param {number|undefined} color - decimal button color (BGR)
     * @param {string|undefined} text - button text
     * @param {string|undefined} image - button image file name
     * @param {number|undefined} border - border size, 0-7
     * - leave parameters empty to reset button back to default values
     */
    async modifyButton(id, color, text = '', image, border) {
      return sendToLB('ModifyButton', {
        ButtonId: id,
        Data: {
          color: color || undefined,
          text: text || undefined,
          image: image || undefined,
          border: border || undefined,
        },
      });
    },

    /**
     * Retrieves all currently modified buttons
     * - object of button objects that are currently modified
     */
    async getModifiedButtons() {
      return sendToLB('GetModifications');
    },

    /**
     * Sends an extension trigger
     * @param {string} trigger - name of the trigger
     * @param {object} data - object containing all trigger pull data
     */
    async triggerExt(trigger, data = {}) {
      return sendToLB('ExtensionTrigger', {
        Trigger: trigger,
        Data: data,
      });
    },

    /**
     * Deletes a variable
     * @param {string} name - name of the variable
     * @param {string} buttonId - button ID for local variable, default = global variable
     */
    async deleteVariable(name, buttonId = 'global') {
      return sendToLB('DeleteVariable', {
        Variable: name,
        ButtonId: buttonId,
      });
    },

    /**
     * Inserts an array value
     * @param {string} arrayName - name of the array
     * @param {number} index - index to insert the new item at
     * @param {string|number|object|array} value - item value
     * @param {string} buttonId - button id, default is global
     */
    async insertArray(arrayName, index, value, buttonId = 'global') {
      return sendToLB('InsertArrayValue', {
        Array: arrayName,
        Slot: index,
        Value: value,
        ButtonId: buttonId,
      });
    },

    /**
     * Deletes an array value at specified index
     * @param {string} arrayName - name of the array
     * @param {number} index - index of the item to delete
     * @param {string} buttonId - button id, default is global
     */
    async deleteArray(arrayName, slot, buttonId = 'global') {
      return sendToLB('DeleteArraySlot', {
        Array: arrayName,
        Slot: slot,
        ButtonId: buttonId,
      });
    },

    /**
     * Sends a notification (tray icon bubble) message to LBn
     * @param {string} msg - message to show
     */
    async notification(msg) {
      return sendToLB('NotificationMessage', {
        Message: msg,
      });
    },
  };

  async function sendToLB(command, data) {
    const res = await lioranboardclient.send(command, data);
    return res;
  } // construct extension command object

  class LBConstructExtCommand {
    constructor(name, color, height) {
      let p = 0;
      this.name = name;
      this.color = color;
      this.height = height;

      this.addBox = (boxVar, params) => {
        this[`ud_t${p}`] = boxVar;
        this[`ud_n${p}`] = params[0];
        this[`ud${p}`] = params[1];
        this[`ud_d${p}`] = params[2];
        this[`ud_m${p}`] = params[3] || undefined;
        this[`ud_o${p}`] = params[4] || undefined;
        p += 1;
      };
    }
  }

  return LBSendCommand;
}

// Twitch client ID to use for Twitch API requests
const TWITCH_CLIENT_ID = "tpqy40pm79e00s63cqusqepvhwqz1n";
// init object with all available LB command methods
const LB = new LBCommands ()
// Expose websocket client, pubsub client and logIt function for global access
let lioranboardclient
let pubsubserver
let logIt
let i_force = "";
// LioranBoard global object with variables
const LBVars = {
LBdebug : JSON.parse(localStorage.getItem('LBdebug')) || {},
pubsubinterval: null,
twitchList: {},
force_close : false, 
box_newline : 0,
box_checkbox : 2,
box_keyboard : 7,
box_compare : 8,
box_math : 9,
cbox_sound : 10,
box_slider : 11,
box_normal : 14,
box_variable : 15,
box_color : 17,
box_selectvalue : 18,
box_selectstring : 19,
box_selectstringwritable : 20,
box_loadfile : 22,
box_imagefile : 23
}

// define LioranBoard connection on load and try to immediately connect
window.addEventListener('load', function (){
lioranboardclient = new LBWebSocket()
load_connection();
connecttoboard();
LBTestTriggers();
}, false);

// modify UI on load
window.addEventListener('load', LBLoadTabsUI, false);
function LBLoadTabsUI() {
  const tabList = {};
  let tabSortList = JSON.parse(localStorage.getItem('tabsSortList')) || [];
  const newtabSortList = [];
  const tabsVisibility = JSON.parse(localStorage.getItem('tabsVisibility')) || [];
  let lastActiveTab = localStorage.getItem('tabsActive') || 'content-basic';
  lastActiveTab = (document.getElementById(lastActiveTab)) ? lastActiveTab : 'content-basic';
  const installedExt = document.querySelector('#installedextensions');
  const ul = document.getElementById('extensions-tab');
  const parent = document.getElementById('extensions-tabContent');
  const contentLi = parent.querySelectorAll('.tab-pane');
  const contentAll = [].slice.call(contentLi).filter((n) => n.parentNode.closest('.tab-pane') === parent.closest('.tab-pane'));
  const defaultContent = contentAll.filter((e) => e.dataset.type === 'default');
  const addedContent = contentAll.filter((e) => e.dataset.type !== 'default');
  const content = defaultContent.concat(addedContent.reverse());
  const activeTab = document.getElementById(lastActiveTab);
  activeTab.className = 'tab-pane active';

  // create tabs and checkboxes
  content.forEach((e) => {
    createExtensionTab(e);
    createExtensionBox(e);
  });
  SortTabs();

  tabSortList = newtabSortList;
  localStorage.setItem('tabsSortList', JSON.stringify(newtabSortList));

  // add drag and sort functionality to tabs
  const draggable = new Draggable.Sortable(ul, {
    draggable: 'li',
    distance: 1,
    sortAnimation: {
      duration: 200,
      easingFunction: 'ease-in-out',
    },
    plugins: [Draggable.Plugins.SortAnimation],
  });

  // save a new sort order
  draggable.on('sortable:sorted', (e) => {
    const sortArr = JSON.parse(localStorage.getItem('tabsSortList'));
    sortArr.splice(e.newIndex, 0, sortArr.splice(e.oldIndex, 1)[0]);
    localStorage.setItem('tabsSortList', JSON.stringify(sortArr));
  });

  // change and save tab visibility
  document.querySelector('#installedextensions').onclick = (ev) => {
    if (ev.target.value) {
      const id = ev.target.id.slice(8);
      const li = document.querySelector(`[aria-controls="${id}"]`);

      if (ev.target.checked) {
        li.classList.remove('d-none');
      } else {
        li.classList.add('d-none');
      }
      SaveExttabsVisibility();
    }
  };

  // show all tabs
  document.querySelector('#extensionsshow').onclick = () => {
    localStorage.removeItem('tabsVisibility');
    location.reload();
  };

  // hide all tabs
  document.querySelector('#extensionshide').onclick = () => {
    const tabsVisiblity = {};
    document.querySelectorAll('#installedextensions input[type=checkbox]').forEach((e) => {
      const id = e.id.slice(8);
      tabsVisiblity[id] = false;
    });
    localStorage.setItem('tabsVisibility', JSON.stringify(tabsVisiblity));
    window.location.reload();
  };

  // reset tab order
  document.querySelector('#extensionsresetorder').onclick = () => {
    localStorage.removeItem('tabsSortList');
    window.location.reload();
  };

  // save active tab
  ul.querySelectorAll('button').forEach((btn) => btn.onclick = (btn) => {
    localStorage.setItem('tabsActive', btn.target.id.slice(0, -4));
  });

  // create all tabs
  function createExtensionTab(e) {
    const { title } = e;
    const { id } = e;
    const li = document.createElement('li');
    const button = document.createElement('button');
    const hide = (typeof tabsVisibility[id] !== 'undefined' && tabsVisibility[id] === false) ? 'd-none' : '';
    const active = (lastActiveTab === id) ? 'active' : '';
    li.setAttributes({ class: 'nav-item', role: 'presentation', draggable: 'true' });
    button.setAttributes({
      class: `nav-link draggable-source ${active} ${hide}`, id: `${id}-tab`, 'data-bs-toggle': 'pill', 'data-bs-target': `#${id}`, type: 'button', role: 'tab', 'aria-controls': id, 'aria-selected': 'false', draggable: 'true',
    });
    button.innerHTML = title;
    li.appendChild(button);
    tabList[id] = li;
  }

  // create all tab check boxes
  function createExtensionBox(e) {
    const checkbox = document.createElement('input');
    const text = document.createElement('span');
    text.innerHTML = `${e.title}  `;
    checkbox.type = 'checkbox';
    checkbox.id = `checkbox${e.id}`;
    checkbox.checked = !((typeof tabsVisibility[e.id] !== 'undefined' && tabsVisibility[e.id] === false));
    text.prepend(checkbox);
    installedExt.appendChild(text);
  }

  // sort tabs
  function SortTabs() {
    let i = 0;
    do {
      const childId = tabSortList[i] || Object.keys(tabList)[0];
      try {
        ul.appendChild(tabList[childId]);
        newtabSortList.push(childId);
      } catch (e) { console.log(e); }
      delete tabList[childId];
      i += 1;
    } while (Object.keys(tabList).length > 0);
  }

  // save tabs visiblity
  function SaveExttabsVisibility() {
    const tabsVisiblity = JSON.parse(localStorage.getItem('tabsVisibility')) || {};
    document.querySelectorAll('#installedextensions input[type=checkbox]').forEach((e) => {
      const id = e.id.slice(8);
      tabsVisiblity[id] = e.checked;
    });
    localStorage.setItem('tabsVisibility', JSON.stringify(tabsVisiblity));
  }
}

// switch to no tabs UI
function TSLNoTabs() {
  document.getElementById('extensions-tab').className = 'd-none d-flex';
  document.getElementById('extensions-tabContent').className = 'notabs';
  document.getElementById('extensions-tab-buttons').className = 'd-none mt-2';
}

// switch to tabs UI
function TSLTabs() {
  document.getElementById('extensions-tab').className = 'nav nav-pills mb-3';
  document.getElementById('extensions-tabContent').className = 'tab-content';
  document.getElementById('extensions-tab-buttons').className = 'mt-2';
}

// change connection status UI
function ConnectionStatus(id, status, text, fill) {
  document.getElementById(id).className = `${status} d-none d-md-inline-flex`;
  document.getElementById(id).innerHTML = ` ${text}`;
  document.getElementById(`${id}_circle`).setAttribute('fill', fill);
}

// helper function to set multiple element attributes at once
Element.prototype.setAttributes = function (obj) {
  for (const prop in obj) {
    this.setAttribute(prop, obj[prop]);
  }
};
// Fake Triggers testing
function LBTestTriggers() {
  const processTrigger = {
    LBTestTwitchSubs(form, notUsed, gifted = false, gifterName = '') {
      const type = 1;
      const subtype = form.subgift.checked
        ? 2
        : form.anongift.checked
          ? 4
          : gifted
            ? 2
            : 1;
      const context = form.subgift.checked
        ? 'subgift'
        : form.anongift.checked
          ? 'anonsubgift'
          : gifted
            ? 'subgift'
            : 'resub';
      const month = parseInt(form.submonths.value) || 1;
      const name = gifted
        ? gifterName
        : form.anongift.checked
          ? 'Anonymous User'
          : generateName();
      const giftedName = subtype !== 1 ? generateName(name) : '';
      const message = form.submessage.value || generateMessage();
      const tiers = form.querySelectorAll('input[name="tier"]');
      let selectedTier;
      let selectedTierD;

      for (const tier of tiers) {
        if (tier.checked) {
          selectedTier = tier.value;
        }
      }

      const selecterTierNum = selectedTier === 'Tier 1'
        ? 1
        : selectedTier === 'Tier 2'
          ? 2
          : selectedTier === 'Tier 3'
            ? 4
            : 8;
      const msg = subtype !== 1
        ? `${name} gifted a sub to ${giftedName}!`
        : `${name} subscribed for ${month} months!`;
      const data = {
        tier: selecterTierNum,
        month,
        subtype,
        communitygift: gifted ? 1 : 0,
      };
      const pullData = {
        user_name: name.toLowerCase(),
        display_name: name,
        user_id: 123456789,
        gifted_user_name: giftedName.toLowerCase(),
        gifted_display_name: giftedName,
        gifted_user_id: 123456789,
        tier: selectedTier,
        context,
        message,
        month,
        community_gift: gifted ? 1 : 0,
      };
      sendTriggerToLB(type, msg, data, pullData);
    },

    LBTestTwitchSubGift(form) {
      const subForm = document.getElementById('LBTestTwitchSubs');
      if (subForm.prime.checked) subForm.tier1.checked = true;
      if (subForm.anongift.checked === false) subForm.subgift.checked = true;
      const tiers = subForm.querySelectorAll('input[name="tier"]');
      let selectedTier;

      for (const tier of tiers) {
        if (tier.checked) {
          selectedTier = tier.value;
        }
      }

      const selecterTierNum = selectedTier === 'Tier 1'
        ? 1
        : selectedTier === 'Tier 2'
          ? 2
          : selectedTier === 'Tier 3'
            ? 4
            : 1;
      const gifterName = subForm.anongift.checked
        ? 'Anonymous user'
        : generateName();
      const amount = parseInt(form.subGiftAmount.value) || 1;
      const pullData = {
        user_name: gifterName.toLowerCase(),
        display_name: gifterName,
        user_id: 123456789,
        amount,
        tier: selectedTier,
      };
      sendTriggerToLB(
        2,
        `${gifterName} has gifted ${amount} subs!`,
        {
          tier: selecterTierNum,
          amount,
        },
        pullData,
      );

      for (let i = 0; i < amount; i++) {
        setTimeout(() => {
          this.LBTestTwitchSubs(subForm, null, true, gifterName);
        }, 1000 + i * 10);
      }
    },

    LBTestTwitchBits(form, pullData) {
      const amount = parseInt(form.bitsamount.value) || 50;
      const totalAmount = parseInt(form.bitstotal.value) || amount + 100;
      const message = form.bitsmessage.value || generateMessage();
      pullData.addvalues({
        amount,
        total_amount: totalAmount,
        message,
      });
      sendTriggerToLB(
        5,
        `${pullData.user_name} donated ${amount} bits!`,
        {
          amount,
        },
        pullData,
      );
    },

    LBTestTwitchPoints(form, pullData) {
      const channelID = Math.floor(Math.random() * 1000000000);
      const redeemName = form.channelPointsName.value || 'Test Reward';
      const userInput = form.channelPointsInput.checked;
      const message = userInput
        ? form.channelPointsMsg.value || generateMessage()
        : '';
      const cost = parseInt(form.channelPointsCost.value) || 50;
      const image = 'https://static-cdn.jtvnw.net/custom-reward-images/default-4.png';
      const rewardId = generateUUID();
      const redeemId = generateUUID();
      pullData.addvalues({
        channel_id: channelID,
        redeem_name: redeemName,
        message,
        cost,
        image,
        reward_id: rewardId,
        redeem_id: redeemId,
      });
      sendTriggerToLB(
        3,
        `${pullData.display_name} has redeemed ${redeemName}!`,
        {
          redeemname: redeemName,
          message,
        },
        pullData,
      );
    },

    LBTestTwitchRaid(form, pullData) {
      const amount = parseInt(form.raidAmount.value) || 5;
      pullData.addvalues({
        amount,
      });
      sendTriggerToLB(
        4,
        `${pullData.display_name} is raiding you with ${amount} viewers!`,
        {
          amount,
        },
        pullData,
      );
    },

    LBTestTwitchHost(form, pullData) {
      const amount = parseInt(form.hostamount.value) || 5;
      pullData.addvalues({
        amount,
      });
      sendTriggerToLB(
        14,
        `${pullData.display_name} is hosting you with ${amount} viewers!`,
        {
          amount,
        },
        pullData,
      );
    },

    LBTestTwitchChat(form) {
      const name = form.chatName.value || generateName();
      const userId = Math.floor(Math.random() * 1000000000);
      const message = form.chatMsg.value || generateMessage();
      const channel = Math.floor(Math.random() * 1000000000);
      const color = '#189A8D';
      const emoteList = '304822798:0-9/304682444:11-19';
      const firstTime = form.chatFirstTime.checked;
      const badge = [];
      if (form.chatBroadcaster.checked) badge.push('broadcaster/1');
      if (form.chatMod.checked) badge.push('moderator/1');
      if (form.chatVip.checked) badge.push('vip/1');
      if (form.chatFounder.checked) badge.push('founder/1');

      if (form.chatSub.checked) {
        const tier = parseInt(form.chatMsgSubTier.value);
        let month = form.chatMsgSubMonth.value != 1
          ? parseInt(form.chatMsgSubMonth.value)
          : 0;
        month = month > 3 && month < 6
          ? (month = 3)
          : month > 6 && month < 9
            ? (month = 6)
            : month > 9 && month < 12
              ? (month = 9)
              : month;
        const subBadge = tier === 1
          ? `subscriber/${month}`
          : tier === 2
            ? `subscriber/${2000 + month}`
            : `subscriber/${3000 + month}`;
        badge.push(subBadge);
      }

      const pullData = {
        user_name: name.toLowerCase(),
        display_name: name,
        user_id: userId,
        message,
        emote_list: emoteList,
        badge_list: badge,
        channel,
        name_color: color,
        first_time: firstTime,
      };
      LB.trigger(0, {
        message,
        broadcaster: form.chatBroadcaster.checked,
        moderator: form.chatMod.checked,
        sub: form.chatSub.checked,
        vip: form.chatVip.checked,
        founder: form.chatFounder.checked,
        trigger_data: pullData,
      });
    },

    LBTestTwitchFollow(form, pullData) {
      sendTriggerToLB(
        6,
        `${pullData.display_name} followed you!`,
        {},
        pullData,
      );
    },
  };

  class ConstructPullData {
    constructor(type) {
      const name = generateName();
      this.user_name = type !== 'LBTestTwitchHost' ? name.toLowerCase() : undefined;
      this.display_name = type !== 'LBTestTwitchBits' ? name : undefined;
      this.user_id = type !== 'LBTestTwitchHost'
        ? Math.floor(Math.random() * 1000000000)
        : undefined;

      this.addvalues = (params) => {
        Object.assign(this, params);
      };
    }
  }

  const forms = document.querySelectorAll('.LBTestTriggers');
  Array.prototype.slice.call(forms).forEach((form) => {
    form.addEventListener(
      'submit',
      (e) => {
        e.preventDefault();
        const pullData = new ConstructPullData(form.id);
        processTrigger[form.id](form, pullData);
      },
      false,
    );
  });

  function generateName(name = '') {
    const names = [
      'Lioran',
      'nutella4eva',
      'Kottpower',
      'Neverwho',
      'Deomew',
      'Doodybeard',
      'Exeldro',
      'AuralMoral',
      'SuperMetroid',
      'Melonax',
      'Ptoil',
      'LinksDarkHalf',
      'Derpiii_',
      'CoD360_420',
      'Bill',
      'Kurocha',
      'Lisa',
      'DeathByButtonMash',
      'Daryl',
      'Sebas',
      'Ramsreef',
      'Kelvin214',
      'wellzish',
      'Andilippi',
      'MrWaldo',
      'MrRubberDucky',
      'Cyanidesugar',
      'MisterK',
      'Silverlink',
    ];
    const randomName = names[Math.floor(Math.random() * names.length)];
    if (name !== randomName) return randomName;
    return generateName(name);
  }

  function generateMessage() {
    const messages = [
      'Hello World!',
      "Love your stream, you are a very genuine guy and you're not affraid to say it how it is. But, I would just prefer if you didn't give your opinion, just saying.",
      "Alright, I'll be honest with ya, Bob. My name's not Kirk. It's Skywalker. Luke Skywalker.",
      'Well, that never happened in any of the simulations.',
      'You know, you blow up one sun and suddenly everyone expects you to walk on water.',
      "How's a needle in my butt gonna get water out of my ears?",
      'If you immediately know the candle light is fire, then the meal was cooked a long time ago.',
      'All that glitters is not gold. Fair is foul, and foul is fair Hover through the fog and filthy air. These violent delights have violent ends. Hell is empty and all the devils are here. By the pricking of my thumbs, Something wicked this way comes. Open, locks, Whoever knocks!',
    ];
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    return randomMessage;
  }

  function generateUUID() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (
      c
        ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))
    ).toString(16));
  }

  function sendTriggerToLB(
    type,
    message = 'Test trigger fired.',
    data = {},
    triggerData,
  ) {
    data.trigger_data = triggerData;
    LB.trigger(type, data);
    LB.alert(message);
  }
}  
// load LB connection params from storage
function load_connection() {
  const ls = JSON.parse(localStorage.getItem('lsParams')) || {};
  nIPbox.value = ls.ip || '127.0.0.1';
  nPortBox.value = ls.port || 9425;
  nPassBox.value = ls.pass || '';
}

// manually connect/disconnect from LB via button
function connectbutton() {
  let _lioranboardclient;

  const p = LBVars;

  if (
    (_lioranboardclient = lioranboardclient) !== null
    && _lioranboardclient !== void 0
    && _lioranboardclient._connected
  ) {
    p.force_close = true;
    lioranboardclient.send('Close');
    lioranboardclient.disconnect();
    ConnectionStatus('toclient', 'disconnected', 'Connection Closed', 'red');
    document.querySelector('#cnctbutton').innerText = 'Disconnecting';
  } else {
    console.log('LioranBoard Manual Connection.');

    try {
      clearTimeout(p.waiting_to_connect);
    } catch (e) {}

    connecttoboard();
  }
}

// Connect to LB and listen for events
function connecttoboard() {
  LBDebugLog(dbgReceiver);

  try {
    clearTimeout(p.waiting_to_connect);
  } catch (e) {}

  const p = LBVars;

  // CONNECT TO LIORANBOARD
  lioranboardclient.connect({
    address: `${nIPbox.value || '127.0.0.1'}:${nPortBox.value || 9425}`,
    password: `${nPassBox.value || ''}`,
    name: 'Transmitter',
  });

  // CONNECTION OPENED
  lioranboardclient.on('ConnectionOpened', () => {
    document.querySelector('#cnctbutton').innerText = 'Disconnect';
    console.log('LioranBoard Connection opened!');
  });
  lioranboardclient.on('error', (err) => {
    lioranboardclient.disconnect();
  });

  // AUTH SUCCESSFUL
  lioranboardclient.on('AuthenticationSuccess', async () => {
    // Send all extension commands to LB
    sendExtensionCommands(); // Get Twitch list and connect to Pubsub

    await LB.getTwitchList().then((data) => {
      p.twitchList = data.twitch_list;
      connectPubSubserver();
    });

    // Save connection params to storage
    const ls = {
      ip: nIPbox.value,
      port: nPortBox.value,
      pass: nPassBox.value,
    };
    localStorage.setItem('lsParams', JSON.stringify(ls));

    // set current browser as global variable
    LB.setVariable('browser_name', browser);

    ConnectionStatus('toclient', 'connected', 'Connected', 'green');
    console.log('LioranBoard Authentication successsful!');
  });

  // CONNECTION CLOSED
  lioranboardclient.on('ConnectionClosed', () => {
    try {
      clearTimeout(p.waiting_to_connect);
    } catch (e) {}

    lioranboardclient.removeAllListeners();

    // Attempt to force disconnect from PubSub
    try {
      pubsubserver.close();
    } catch (e) {}

    // Attempt to reconnect if not manual disconnect
    if (!p.force_close) {
      ConnectionStatus(
        'toclient',
        'disconnected',
        'Disconnected, attempting to reconnect.',
        'red',
      );
      console.log('LioranBoard disconnected. Attempting to reconnect in 2s.');
      p.waiting_to_connect = setTimeout(() => {
        connecttoboard();
      }, 2000);
    } else {
      console.log('LioranBoard disconnected by user.');
      ConnectionStatus('toclient', 'disconnected', 'Connection Closed', 'red');
    }

    p.force_close = false;
    document.querySelector('#cnctbutton').innerText = 'Connect';
  });

  // CONNECTION ERROR
  lioranboardclient.on('ConnectionError', (e) => {
    // Try to force close the connection
    try {
      lioranboard.disconnect();
    } catch (e) {}

    console.log('LioranBoard Connection error');
  });

  // RELOAD TRANSMITTER
  lioranboardclient.on('ResetPlease', () => {
    location.reload();
  });

  // EXECUTE COMMAND
  lioranboardclient.on('ExecuteCommand', (json) => {
    LBExtensionReceived(json.CommandName, json.Data);
  });
}

// Get Browser Name

const browser = (function () {
  const test = function (regexp) { return regexp.test(window.navigator.userAgent); };
  switch (true) {
    case test(/OBS/i): return 'OBS';
    case test(/edg/i): return 'Microsoft Edge';
    case test(/trident/i): return 'Microsoft Internet Explorer';
    case test(/firefox|fxios/i): return 'Mozilla Firefox';
    case test(/opr\//i): return 'Opera';
    case test(/ucbrowser/i): return 'UC Browser';
    case test(/samsungbrowser/i): return 'Samsung Browser';
    case test(/chrome|chromium|crios/i): return 'Google Chrome';
    case test(/safari/i): return 'Apple Safari';
    default: return 'Other';
  }
}());

function sendExtensionCommands() {
// You LioranBoard extension commands will be inserted here
/*INSERT PART 2*/
}

// Connect to PubSub
function connectPubSubserver() {
  const p = LBVars; 
  
  // Do not connect if user's Twitch account isn't linked
  if (Object.keys(p.twitchList).length === 0) {
    ConnectionStatus(
      "topubsub",
      "disconnected",
      "No linked account found.",
      "grey"
    );
    return;
  }

  pubsubserver = new WebSocket("wss://pubsub-edge.twitch.tv");

  function PubSubPing() {
    pubsubserver.send(
      JSON.stringify({
        type: "PING"
      })
    );
  } 
  
  // Attempt to reconnect on disconnect, unless LioranBoard is disconnected
  pubsubserver.onclose = () => {
    var _lioranboardclient;

    try {
      clearInterval(p.pubsubinterval);
    } catch (e) {}

    const i_obj = {
      topic: "pubsubdisconnected",
      type: "MESSAGE"
    };
    ConnectionStatus(
      "topubsub",
      "disconnected",
      "Connection closed. Attempting to reconnect.",
      "red"
    );
    if (
      (_lioranboardclient = lioranboardclient) !== null &&
      _lioranboardclient !== void 0 &&
      _lioranboardclient._connected
    )
      connectPubSubserver();
  }; 
  
  // Once connected, listen for stuff
  pubsubserver.onopen = () => {
    p.pubsubinterval = setInterval(PubSubPing, 120000);
    console.log("Twitch PubSub connected successfully.");
    ConnectionStatus("topubsub", "connected", "Connected", "green"); // List of available Pubsub topic versions

    const listenTopics = {
      listen_bits: ["bits", "channel-bits-events-v2"],
      listen_follow: ["follows", "following"],
      listen_moderation: ["mod", "chat_moderator_actions"],
      listen_redeem: ["redeem", "channel-points-channel-v1"],
      listen_subs: ["subs", "channel-subscribe-events-v1"],
      listen_whispers: ["whispers", "whispers"],
      listen_hypetrain: ["hypetrain", "hype-train-events-v1"],
      listen_predictions: ["predictions", "predictions-channel-v1"],
      listen_polls: ["polls", "polls"]
    };

    // Construct a listen object to send to Pubsub
    function PubsubConstructListen(id, token) {
      this.type = "LISTEN";
      this.data = {
        auth_token: token
      };

      this.changeTopic = (type, topic) => {
        this.nonce = `${type}-${id}`;
        this.data.topics = (type !== 'mod') ? [`${topic}.${id}`] : [`${topic}.${id}.${id}`];
      };
    }
    
    // Go through the Twitch list and listen to everything the user selected
    Object.values(p.twitchList).forEach((params) => {
      const pubsubListen = new PubsubConstructListen(
        params.user_id,
        params.token
      );
      Object.keys(params).forEach((key) => {
        if (key.includes("listen_") && params[key]) {
          pubsubListen.changeTopic(listenTopics[key][0], listenTopics[key][1]);
          pubsubserver.send(JSON.stringify(pubsubListen));
        }
      });
    });
  }; 
  
  // Send data from Pubsub to LioranBoard
  pubsubserver.onmessage = (event) => {
    // send pubsub message to lioranboard, let it deal with it
    lioranboardclient.send("PubSubMessage", {
      Data: JSON.parse(event.data)
    });
    if (LBDebugPost && p.LBdebug.pubsub) LBDebugPost("pubsub", event.data);
  };
}

function LBExtensionReceived(hook, LioranBoardJSON) {
  switch (hook) {
    // hook you specified.
    default:
      break;
//You hooks will be inserted here
/*INSERT PART 3*/
   }
}

(function initDebugLogging() {
  dbgReceiver.checked = LBVars.LBdebug.receiver;
  dbgPubsub.checked = LBVars.LBdebug.pubsub;
  LBDebugLog(dbgPubsub); LBDebugLog(dbgReceiver);
}());

function LBDebugLog(e) {
  const receiver = document.getElementById('LBreceiverlog');
  const pubsub = document.getElementById('LBpubsublog');
  const listening = '<samp>Listening for traffic.</samp>';
  const disabled = '<samp>Logging is disabled.</samp>';
  // disable or enable debug logging and display it

  switch (e.id) {
    default:
      break;
    case 'dbgReceiver':
      if (e.checked) {
        if (localStorage.debug === 'lb-websocket-js:*') {
          const _debug = console.debug.bind(console);
          logIt = function (...args) {
            const msg = {};
            _debug.apply(console, arguments);
            if (!LBDebugPost) return;
            Object.assign(msg, args[args.length - 2]);
            if (args[0].includes('Sending Message')) LBDebugPost('receiverSent', msg);
            else if (args[0].includes('Message received')) {
              LBDebugPost('receiver', msg);
            }
          };
          receiver.innerHTML = listening;
        } else {
          receiver.innerHTML = '<samp>Logging will be enabled once Transmitter is reloaded.</samp>';
        }
        localStorage.debug = 'lb-websocket-js:*';
      } else {
        if (localStorage.debug == 0) receiver.innerHTML = disabled;
        else {
          receiver.innerHTML = '<samp>Logging will be disabled once Transmitter is reloaded.</samp>';
        }
        logIt = null;
        localStorage.debug = 0;
      }
      LBVars.LBdebug.receiver = !!(e.checked);
      break;
    case 'dbgPubsub':
      pubsub.innerHTML = (e.checked) ? listening : disabled;
      LBVars.LBdebug.pubsub = !!(e.checked);
      break;
  }
  localStorage.setItem('LBdebug', JSON.stringify(LBVars.LBdebug));
}

function LBDebugPost(type, msg) {
  const p = LBVars;
  if (!p.LBdebug) return;
  const receiverlog = document.getElementById('LBreceiverlog');
  const pubsublog = document.getElementById('LBpubsublog');
  const arrowDown = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-arrow-down" viewBox="0 0 16 16"> <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z"/> </svg>';
  const arrowUp = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="green" class="bi bi-arrow-up" viewBox="0 0 16 16"> <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"/> </svg>';

  // post a message into the debug log if enabled
  switch (type) {
    default:
      break;
    case 'receiver':
    case 'receiverSent':
      if (p.LBdebug.receiver) {
        const request = msg.rq || msg.upd;
        const { id } = msg;
        try {
          delete msg.id; delete msg.rq;
        } catch (e) {}
        if (request === 'Pong' || request === 'Ping' || msg.upd === 'Ping') return;
        if (msg.rq) {
          receiverlog.innerHTML += `<br> ${type === 'receiver' ? arrowUp : arrowDown} <samp>Request: ${request}, Id: ${id}, Data: ${StringifyandReplace(msg)} </samp>`;
        } else {
          receiverlog.innerHTML += `<br> ${type === 'receiver' ? arrowUp : arrowDown} <samp>Update: ${request}, Data: ${StringifyandReplace(msg)} </samp>`;
        }
      }
      break;
    case 'pubsub':
      console.log(msg);
      if (p.LBdebug.pubsub && !msg.includes('PONG')) pubsublog.innerHTML += `<br> ${arrowDown} <samp>${StringifyandReplace(msg)} </samp>`;
      break;
  }

  // stringify if message is an object and replace some symbols
  // for better readability
  function StringifyandReplace(obj) {
    const regexToken = /"token":"[^"]*"/i;
    if (typeof obj === 'object') obj = JSON.stringify(obj);
    const strRpl = (typeof obj === 'string') ? obj.replace(/\r\n/g, '').replace(/\\/g, '').replace(/\\/g, '').replace(/%s/g, '')
      .replace(/%o/g, '')
      .replace(/%c/g, '')
      .replace(regexToken, '"token":"xxxxx"')
      : obj;
    return strRpl;
  }
}

// Your main script will be inserted here
/*INSERT PART 4*/

(function(e,t){'object'==typeof exports&&'object'==typeof module?module.exports=t():'function'==typeof define&&define.amd?define([],t):'object'==typeof exports?exports.LBWebSocket=t():e.LBWebSocket=t()})(window,function(){var t=Math.abs,n=Math.floor,o=Math.pow,e=Math.min;return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(e,'__esModule',{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&'object'==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,'default',{enumerable:!0,value:e}),2&n&&'string'!=typeof e)for(var r in e)t.d(o,r,function(t){return e[t]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e['default']}:function(){return e};return t.d(n,'a',n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p='',t(t.s=0)}([function(e,t,n){function o(){return l++ +''}const r=n(1),s=n(14),i=n(15)('lb-websocket-js:Core');let l=0;const a=['GetDeckList','GetModifications','GetVersion','Close','GetOngoingButtons','GetTwitchList','GetModifications'];e.exports=class extends r{send(e,t={}){return'Authentication'===e&&(l=0),t=t||{},new Promise((n,r)=>{const l=o();let u;if(e||(u=s.REQUEST_TYPE_NOT_SPECIFIED),t||a.includes(e)||(u=s.ARGS_NOT_SPECIFIED),t&&('object'!=typeof t||null===t||Array.isArray(t))&&(u=s.ARGS_NOT_OBJECT),this._connected||(u=s.NOT_CONNECTED),this.once(`lb:internal:message:id-${l}`,(e,t)=>{e?r(e):n(t)}),!u){t.rq=e,t.id=l,i('[Sending Message] %s %s %o',l,e,t);try{this._socket.send(JSON.stringify(t))}catch(e){u=s.SOCKET_EXCEPTION}}u&&this.emit(`lb:internal:message:id-${l}`,u)})}}},function(e,t,n){const o=n(2),r=n(4),s=n(5),i=n(14),l=n(15)('lb-websocket-js:Socket'),a=n(19);e.exports=class extends r{constructor(){super(),this._connected=!1,this._socket=void 0}async connect(e){e=e||{};const t=e.address||'localhost:9425',n=e.name||(Math.random()+1).toString(36).substring(2);if(this._socket)try{this._socket.close()}catch(e){l('Failed to close previous WebSocket:',e.message)}return new Promise(async(o,r)=>{try{await this._connect(t,!!e.secure),await this._authenticate(n,e.password),o()}catch(e){this._socket.close(),this._connected=!1,a(l,'Connection failed:',e),r(e)}})}async _connect(e,t){return new Promise((n,r)=>{let s=!1;l('Attempting to connect to: %s',e),this._socket=new o((t?'wss://':'ws://')+e),this._socket.binaryType='arraybuffer',this._socket.onerror=(e)=>{return s?(a(l,'Unknown Socket Error',e),void this.emit('error',e)):void(s=!0,a(l,'Websocket Connection failed:',e),r(i.CONNECTION_ERROR))},this._socket.onopen=()=>{s||(this._connected=!0,s=!0,l('Connection opened: %s',e),this.emit('ConnectionOpened'),n())},this._socket.onclose=()=>{this._connected=!1,l('Connection closed: %s',e),this.emit('ConnectionClosed')},this._socket.onmessage=(e)=>{const t=JSON.parse(new TextDecoder().decode(e.data));l('[Message received] %o',t);let n,o;404===t.status?n=t.error:o=t,t.id?this.emit(`lb:internal:message:id-${t.id}`,n,o):t.upd?('Ping'===t.upd?this.send('Pong'):this.emit(t.upd,o),'ExecuteCommand'===t.upd&&this.emit(t.CommandName,o)):this.emit('message',t)}})}async _authenticate(e='Transmitter',t=''){if(!this._connected)throw i.NOT_CONNECTED;const n=await this.send('Authentication',{Name:e});if(!1===n.AuthRequired)return l('Authentication not Required'),this.emit('AuthenticationSuccess'),i.AUTH_NOT_REQUIRED;try{await this.send('Authenticate',{Name:e,Enigma:s(n.Salt,n.Challenge,t)})}catch(t){throw l('Authentication Failure %o',t),this.emit('AuthenticationFailure'),t}l('Authentication Success'),this.emit('AuthenticationSuccess')}disconnect(){l('Disconnect requested.'),this._socket&&this._socket.close()}}},function(e,t,n){(function(t){var n=null;'undefined'==typeof WebSocket?'undefined'==typeof MozWebSocket?'undefined'==typeof t?'undefined'==typeof window?'undefined'!=typeof self&&(n=self.WebSocket||self.MozWebSocket):n=window.WebSocket||window.MozWebSocket:n=t.WebSocket||t.MozWebSocket:n=MozWebSocket:n=WebSocket,e.exports=n}).call(this,n(3))},function(e){var t=function(){return this}();try{t=t||new Function('return this')()}catch(n){'object'==typeof window&&(t=window)}e.exports=t},function(e){'use strict';function t(e){console&&console.warn&&console.warn(e)}function n(){n.init.call(this)}function o(e){if('function'!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function r(e){return void 0===e._maxListeners?n.defaultMaxListeners:e._maxListeners}function s(e,n,s,i){var l,a,u;if(o(s),a=e._events,void 0===a?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit('newListener',n,s.listener?s.listener:s),a=e._events),u=a[n]),void 0===u)u=a[n]=s,++e._eventsCount;else if('function'==typeof u?u=a[n]=i?[s,u]:[u,s]:i?u.unshift(s):u.push(s),l=r(e),0<l&&u.length>l&&!u.warned){u.warned=!0;var p=new Error('Possible EventEmitter memory leak detected. '+u.length+' '+(n+' listeners added. Use emitter.setMaxListeners() to increase limit'));p.name='MaxListenersExceededWarning',p.emitter=e,p.type=n,p.count=u.length,t(p)}return e}function i(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,n){var o={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=i.bind(o);return r.listener=n,o.wrapFn=r,r}function a(e,t,n){var o=e._events;if(o===void 0)return[];var r=o[t];return void 0===r?[]:'function'==typeof r?n?[r.listener||r]:[r]:n?c(r):p(r,r.length)}function u(e){var t=this._events;if(t!==void 0){var n=t[e];if('function'==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(e,t){for(var n=Array(t),o=0;o<t;++o)n[o]=e[o];return n}function d(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function c(e){for(var t=Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}function f(e,t,n){'function'==typeof e.on&&g(e,'error',t,n)}function g(e,t,n,o){if('function'==typeof e.on)o.once?e.once(t,n):e.on(t,n);else if('function'==typeof e.addEventListener)e.addEventListener(t,function r(s){o.once&&e.removeEventListener(t,r),n(s)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e)}var h,m='object'==typeof Reflect?Reflect:null,_=m&&'function'==typeof m.apply?m.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};h=m&&'function'==typeof m.ownKeys?m.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var y=Number.isNaN||function(e){return e!==e};e.exports=n,e.exports.once=function(e,t){return new Promise(function(n,o){function r(n){e.removeListener(t,s),o(n)}function s(){'function'==typeof e.removeListener&&e.removeListener('error',r),n([].slice.call(arguments))}g(e,t,s,{once:!0}),'error'!==t&&f(e,r,{once:!0})})},n.EventEmitter=n,n.prototype._events=void 0,n.prototype._eventsCount=0,n.prototype._maxListeners=void 0;var C=10;Object.defineProperty(n,'defaultMaxListeners',{enumerable:!0,get:function(){return C},set:function(e){if('number'!=typeof e||0>e||y(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+'.');C=e}}),n.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},n.prototype.setMaxListeners=function(e){if('number'!=typeof e||0>e||y(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+'.');return this._maxListeners=e,this},n.prototype.getMaxListeners=function(){return r(this)},n.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o='error'===e,r=this._events;if(r!==void 0)o=o&&r.error===void 0;else if(!o)return!1;if(o){var s;if(0<t.length&&(s=t[0]),s instanceof Error)throw s;var i=new Error('Unhandled error.'+(s?' ('+s.message+')':''));throw i.context=s,i}var l=r[e];if(l===void 0)return!1;if('function'==typeof l)_(l,this,t);else for(var a=l.length,u=p(l,a),n=0;n<a;++n)_(u[n],this,t);return!0},n.prototype.addListener=function(e,t){return s(this,e,t,!1)},n.prototype.on=n.prototype.addListener,n.prototype.prependListener=function(e,t){return s(this,e,t,!0)},n.prototype.once=function(e,t){return o(t),this.on(e,l(this,e,t)),this},n.prototype.prependOnceListener=function(e,t){return o(t),this.prependListener(e,l(this,e,t)),this},n.prototype.removeListener=function(e,t){var n,r,s,l,i;if(o(t),r=this._events,void 0===r)return this;if(n=r[e],void 0===n)return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit('removeListener',e,n.listener||t));else if('function'!=typeof n){for(s=-1,l=n.length-1;0<=l;l--)if(n[l]===t||n[l].listener===t){i=n[l].listener,s=l;break}if(0>s)return this;0===s?n.shift():d(n,s),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit('removeListener',e,i||t)}return this},n.prototype.off=n.prototype.removeListener,n.prototype.removeAllListeners=function(e){var t,n,o;if(n=this._events,void 0===n)return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,s=Object.keys(n);for(o=0;o<s.length;++o)r=s[o],'removeListener'===r||this.removeAllListeners(r);return this.removeAllListeners('removeListener'),this._events=Object.create(null),this._eventsCount=0,this}if(t=n[e],'function'==typeof t)this.removeListener(e,t);else if(void 0!==t)for(o=t.length-1;0<=o;o--)this.removeListener(e,t[o]);return this},n.prototype.listeners=function(e){return a(this,e,!0)},n.prototype.rawListeners=function(e){return a(this,e,!1)},n.listenerCount=function(e,t){return'function'==typeof e.listenerCount?e.listenerCount(t):u.call(e,t)},n.prototype.listenerCount=u,n.prototype.eventNames=function(){return 0<this._eventsCount?h(this._events):[]}},function(e,t,n){const o=n(6);e.exports=function(e='',t='',n){const r=new o().update(n).update(e).digest('base64'),s=new o().update(r).update(t).digest('base64');return s}},function(e,t,n){function o(){this.init(),this._w=f,d.call(this,64,56)}function r(e,t,n){return n^e&(t^n)}function s(e,t,n){return e&t|n&(e|t)}function i(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function l(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function a(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}function u(e){return(e>>>17|e<<15)^(e>>>19|e<<13)^e>>>10}var p=n(7),d=n(8),c=n(9).Buffer,m=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],f=Array(64);p(o,d),o.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},o.prototype._update=function(t){for(var n=this._w,o=0|this._a,p=0|this._b,_=0|this._c,c=0|this._d,d=0|this._e,e=0|this._f,f=0|this._g,g=0|this._h,h=0;16>h;++h)n[h]=t.readInt32BE(4*h);for(;64>h;++h)n[h]=0|u(n[h-2])+n[h-7]+a(n[h-15])+n[h-16];for(var y=0;64>y;++y){var C=0|g+l(d)+r(d,e,f)+m[y]+n[y],b=0|i(o)+s(o,p,_);g=f,f=e,e=d,d=0|c+C,c=_,_=p,p=o,o=0|C+b}this._a=0|o+this._a,this._b=0|p+this._b,this._c=0|_+this._c,this._d=0|c+this._d,this._e=0|d+this._e,this._f=0|e+this._f,this._g=0|f+this._g,this._h=0|g+this._h},o.prototype._hash=function(){var e=c.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=o},function(e){e.exports='function'==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(t,n,o){function r(e,t){this._block=s.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}var s=o(9).Buffer;r.prototype.update=function(t,n){'string'==typeof t&&(n=n||'utf8',t=s.from(t,n));for(var o=this._block,r=this._blockSize,l=t.length,a=this._len,u=0;u<l;){for(var p=a%r,d=e(l-u,r-p),c=0;c<d;c++)o[p+c]=t[u+c];a+=d,u+=d,0==a%r&&this._update(o)}return this._len+=l,this},r.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(4294967295>=n)this._block.writeUInt32BE(n,this._blockSize-4);else{var o=(4294967295&n)>>>0;this._block.writeUInt32BE((n-o)/4294967296,this._blockSize-8),this._block.writeUInt32BE(o,this._blockSize-4)}this._update(this._block);var r=this._hash();return e?r.toString(e):r},r.prototype._update=function(){throw new Error('_update must be implemented by subclass')},t.exports=r},function(e,t,n){function o(e,t){for(var n in e)t[n]=e[n]}function r(e,t,n){return i(e,t,n)}var s=n(10),i=s.Buffer;i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=s:(o(s,t),t.Buffer=r),o(i,r),r.from=function(e,t,n){if('number'==typeof e)throw new TypeError('Argument must not be a number');return i(e,t,n)},r.alloc=function(e,t,n){if('number'!=typeof e)throw new TypeError('Argument must be a number');var o=i(e);return void 0===t?o.fill(0):'string'==typeof n?o.fill(t,n):o.fill(t),o},r.allocUnsafe=function(e){if('number'!=typeof e)throw new TypeError('Argument must be a number');return i(e)},r.allocUnsafeSlow=function(e){if('number'!=typeof e)throw new TypeError('Argument must be a number');return s.SlowBuffer(e)}},function(t,r,s){'use strict';(function(t){function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function l(e,t){if(i()<t)throw new RangeError('Invalid typed array length');return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t),e.__proto__=u.prototype):(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!u.TYPED_ARRAY_SUPPORT&&!(this instanceof u))return new u(e,t,n);if('number'==typeof e){if('string'==typeof t)throw new Error('If encoding is specified then the first argument must be a string');return c(this,e)}return a(this,e,t,n)}function a(e,t,n,o){if('number'==typeof t)throw new TypeError('"value" argument must not be a number');return'undefined'!=typeof ArrayBuffer&&t instanceof ArrayBuffer?h(e,t,n,o):'string'==typeof t?f(e,t,n):m(e,t)}function p(e){if('number'!=typeof e)throw new TypeError('"size" argument must be a number');else if(0>e)throw new RangeError('"size" argument must not be negative')}function d(e,t,n,o){return p(t),0>=t?l(e,t):void 0===n?l(e,t):'string'==typeof o?l(e,t).fill(n,o):l(e,t).fill(n)}function c(e,t){if(p(t),e=l(e,0>t?0:0|_(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t,n){if(('string'!=typeof n||''===n)&&(n='utf8'),!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var o=0|y(t,n);e=l(e,o);var r=e.write(t,n);return r!==o&&(e=e.slice(0,r)),e}function g(e,t){var n=0>t.length?0:0|_(t.length);e=l(e,n);for(var o=0;o<n;o+=1)e[o]=255&t[o];return e}function h(e,t,n,o){if(t.byteLength,0>n||t.byteLength<n)throw new RangeError('\'offset\' is out of bounds');if(t.byteLength<n+(o||0))throw new RangeError('\'length\' is out of bounds');return t=void 0===n&&void 0===o?new Uint8Array(t):void 0===o?new Uint8Array(t,n):new Uint8Array(t,n,o),u.TYPED_ARRAY_SUPPORT?(e=t,e.__proto__=u.prototype):e=g(e,t),e}function m(e,t){if(u.isBuffer(t)){var n=0|_(t.length);return(e=l(e,n),0===e.length)?e:(t.copy(e,0,0,n),e)}if(t){if('undefined'!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||'length'in t)return'number'!=typeof t.length||H(t.length)?l(e,0):g(e,t);if('Buffer'===t.type&&te(t.data))return g(e,t.data)}throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')}function _(e){if(e>=i())throw new RangeError('Attempt to allocate Buffer larger than maximum size: 0x'+i().toString(16)+' bytes');return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if('undefined'!=typeof ArrayBuffer&&'function'==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;'string'!=typeof e&&(e=''+e);var n=e.length;if(0===n)return 0;for(var o=!1;;)switch(t){case'ascii':case'latin1':case'binary':return n;case'utf8':case'utf-8':case void 0:return J(e).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return 2*n;case'hex':return n>>>1;case'base64':return X(e).length;default:if(o)return J(e).length;t=(''+t).toLowerCase(),o=!0;}}function C(e,t,n){var o=!1;if((void 0===t||0>t)&&(t=0),t>this.length)return'';if((void 0===n||n>this.length)&&(n=this.length),0>=n)return'';if(n>>>=0,t>>>=0,n<=t)return'';for(e||(e='utf8');;)switch(e){case'hex':return x(this,t,n);case'utf8':case'utf-8':return L(this,t,n);case'ascii':return k(this,t,n);case'latin1':case'binary':return B(this,t,n);case'base64':return S(this,t,n);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return O(this,t,n);default:if(o)throw new TypeError('Unknown encoding: '+e);e=(e+'').toLowerCase(),o=!0;}}function b(e,t,n){var o=e[t];e[t]=e[n],e[n]=o}function E(e,t,n,o,r){if(0===e.length)return-1;if('string'==typeof n?(o=n,n=0):2147483647<n?n=2147483647:-2147483648>n&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:e.length-1),0>n&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(0>n)if(r)n=0;else return-1;if('string'==typeof t&&(t=u.from(t,o)),u.isBuffer(t))return 0===t.length?-1:A(e,t,n,o,r);if('number'==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&'function'==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):A(e,[t],n,o,r);throw new TypeError('val must be string, number or Buffer')}function A(e,t,n,o,r){function s(e,t){return 1==l?e[t]:e.readUInt16BE(t*l)}var l=1,a=e.length,u=t.length;if(void 0!==o&&(o=(o+'').toLowerCase(),'ucs2'===o||'ucs-2'===o||'utf16le'===o||'utf-16le'===o)){if(2>e.length||2>t.length)return-1;l=2,a/=2,u/=2,n/=2}var p;if(r){var i=-1;for(p=n;p<a;p++)if(s(e,p)!==s(t,-1==i?0:p-i))-1!=i&&(p-=p-i),i=-1;else if(-1==i&&(i=p),p-i+1===u)return i*l}else for(n+u>a&&(n=a-u),p=n;0<=p;p--){for(var d=!0,c=0;c<u;c++)if(s(e,p+c)!==s(t,c)){d=!1;break}if(d)return p}return-1}function w(e,t,n,o){n=+n||0;var r=e.length-n;o?(o=+o,o>r&&(o=r)):o=r;var s=t.length;if(0!=s%2)throw new TypeError('Invalid hex string');o>s/2&&(o=s/2);for(var l,a=0;a<o;++a){if(l=parseInt(t.substr(2*a,2),16),isNaN(l))return a;e[n+a]=l}return a}function v(e,t,n,o){return V(J(t,e.length-n),e,n,o)}function P(e,t,n,o){return V(K(t),e,n,o)}function T(e,t,n,o){return P(e,t,n,o)}function F(e,t,n,o){return V(X(t),e,n,o)}function R(e,t,n,o){return V(Q(t,e.length-n),e,n,o)}function S(e,t,n){return 0===t&&n===e.length?Z.fromByteArray(e):Z.fromByteArray(e.slice(t,n))}function L(t,n,o){o=e(t.length,o);for(var r=[],s=n;s<o;){var i=t[s],l=null,a=239<i?4:223<i?3:191<i?2:1;if(s+a<=o){var u,p,d,c;1==a?128>i&&(l=i):2==a?(u=t[s+1],128==(192&u)&&(c=(31&i)<<6|63&u,127<c&&(l=c))):3==a?(u=t[s+1],p=t[s+2],128==(192&u)&&128==(192&p)&&(c=(15&i)<<12|(63&u)<<6|63&p,2047<c&&(55296>c||57343<c)&&(l=c))):4==a?(u=t[s+1],p=t[s+2],d=t[s+3],128==(192&u)&&128==(192&p)&&128==(192&d)&&(c=(15&i)<<18|(63&u)<<12|(63&p)<<6|63&d,65535<c&&1114112>c&&(l=c))):void 0}null===l?(l=65533,a=1):65535<l&&(l-=65536,r.push(55296|1023&l>>>10),l=56320|1023&l),r.push(l),s+=a}return I(r)}function I(e){var t=e.length;if(t<=ne)return $.apply(String,e);for(var n='',o=0;o<t;)n+=$.apply(String,e.slice(o,o+=ne));return n}function k(t,n,o){var r='';o=e(t.length,o);for(var s=n;s<o;++s)r+=$(127&t[s]);return r}function B(t,n,o){var r='';o=e(t.length,o);for(var s=n;s<o;++s)r+=$(t[s]);return r}function x(e,t,n){var o=e.length;(!t||0>t)&&(t=0),(!n||0>n||n>o)&&(n=o);for(var r='',s=t;s<n;++s)r+=q(e[s]);return r}function O(e,t,n){for(var o=e.slice(t,n),r='',s=0;s<o.length;s+=2)r+=$(o[s]+256*o[s+1]);return r}function U(e,t,n){if(0!=e%1||0>e)throw new RangeError('offset is not uint');if(e+t>n)throw new RangeError('Trying to access beyond buffer length')}function Y(e,t,n,o,r,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<s)throw new RangeError('"value" argument is out of bounds');if(n+o>e.length)throw new RangeError('Index out of range')}function N(t,n,o,r){0>n&&(n=65535+n+1);for(var s=0,i=e(t.length-o,2);s<i;++s)t[o+s]=(n&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function D(t,n,o,r){0>n&&(n=4294967295+n+1);for(var s=0,i=e(t.length-o,4);s<i;++s)t[o+s]=255&n>>>8*(r?s:3-s)}function j(e,t,n,o){if(n+o>e.length)throw new RangeError('Index out of range');if(0>n)throw new RangeError('Index out of range')}function M(e,t,n,o,r){return r||j(e,t,n,4,3.4028234663852886e38,-3.4028234663852886e38),ee.write(e,t,n,o,23,4),n+4}function z(e,t,n,o,r){return r||j(e,t,n,8,1.7976931348623157e308,-1.7976931348623157e308),ee.write(e,t,n,o,52,8),n+8}function W(e){if(e=G(e).replace(oe,''),2>e.length)return'';for(;0!=e.length%4;)e+='=';return e}function G(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,'')}function q(e){return 16>e?'0'+e.toString(16):e.toString(16)}function J(e,t){t=t||Infinity;for(var n,o=e.length,r=null,s=[],l=0;l<o;++l){if(n=e.charCodeAt(l),55295<n&&57344>n){if(!r){if(56319<n){-1<(t-=3)&&s.push(239,191,189);continue}else if(l+1===o){-1<(t-=3)&&s.push(239,191,189);continue}r=n;continue}if(56320>n){-1<(t-=3)&&s.push(239,191,189),r=n;continue}n=(r-55296<<10|n-56320)+65536}else r&&-1<(t-=3)&&s.push(239,191,189);if(r=null,128>n){if(0>(t-=1))break;s.push(n)}else if(2048>n){if(0>(t-=2))break;s.push(192|n>>6,128|63&n)}else if(65536>n){if(0>(t-=3))break;s.push(224|n>>12,128|63&n>>6,128|63&n)}else if(1114112>n){if(0>(t-=4))break;s.push(240|n>>18,128|63&n>>12,128|63&n>>6,128|63&n)}else throw new Error('Invalid code point')}return s}function K(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}function Q(e,t){for(var n,o,r,s=[],l=0;l<e.length&&!(0>(t-=2));++l)n=e.charCodeAt(l),o=n>>8,r=n%256,s.push(r),s.push(o);return s}function X(e){return Z.toByteArray(W(e))}function V(e,t,n,o){for(var r=0;r<o&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function H(e){return e!==e}var $=String.fromCharCode,Z=s(11),ee=s(12),te=s(13);r.Buffer=u,r.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},r.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=t.TYPED_ARRAY_SUPPORT===void 0?function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&'function'==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(t){return!1}}():t.TYPED_ARRAY_SUPPORT,r.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return a(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,'undefined'!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return d(null,e,t,n)},u.allocUnsafe=function(e){return c(null,e)},u.allocUnsafeSlow=function(e){return c(null,e)},u.isBuffer=function(e){return!!(null!=e&&e._isBuffer)},u.compare=function(t,n){if(!u.isBuffer(t)||!u.isBuffer(n))throw new TypeError('Arguments must be Buffers');if(t===n)return 0;for(var o=t.length,r=n.length,s=0,i=e(o,r);s<i;++s)if(t[s]!==n[s]){o=t[s],r=n[s];break}return o<r?-1:r<o?1:0},u.isEncoding=function(e){switch((e+'').toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return!0;default:return!1;}},u.concat=function(e,t){if(!te(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(t===void 0)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var o=u.allocUnsafe(t),r=0;for(n=0;n<e.length;++n){var s=e[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(o,r),r+=s.length}return o},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(0!=e%2)throw new RangeError('Buffer size must be a multiple of 16-bits');for(var t=0;t<e;t+=2)b(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(0!=e%4)throw new RangeError('Buffer size must be a multiple of 32-bits');for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(0!=e%8)throw new RangeError('Buffer size must be a multiple of 64-bits');for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0==e?'':0===arguments.length?L(this,0,e):C.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError('Argument must be a Buffer');return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e='',t=r.INSPECT_MAX_BYTES;return 0<this.length&&(e=this.toString('hex',0,t).match(/.{2}/g).join(' '),this.length>t&&(e+=' ... ')),'<Buffer '+e+'>'},u.prototype.compare=function(t,n,o,r,s){if(!u.isBuffer(t))throw new TypeError('Argument must be a Buffer');if(void 0===n&&(n=0),void 0===o&&(o=t?t.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),0>n||o>t.length||0>r||s>this.length)throw new RangeError('out of range index');if(r>=s&&n>=o)return 0;if(r>=s)return-1;if(n>=o)return 1;if(n>>>=0,o>>>=0,r>>>=0,s>>>=0,this===t)return 0;for(var l=s-r,a=o-n,p=e(l,a),d=this.slice(r,s),c=t.slice(n,o),f=0;f<p;++f)if(d[f]!==c[f]){l=d[f],a=c[f];break}return l<a?-1:a<l?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return E(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return E(this,e,t,n,!1)},u.prototype.write=function(e,t,n,o){if(void 0===t)o='utf8',n=this.length,t=0;else if(void 0===n&&'string'==typeof t)o=t,n=this.length,t=0;else if(isFinite(t))t|=0,isFinite(n)?(n|=0,void 0===o&&(o='utf8')):(o=n,n=void 0);else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');var r=this.length-t;if((void 0===n||n>r)&&(n=r),0<e.length&&(0>n||0>t)||t>this.length)throw new RangeError('Attempt to write outside buffer bounds');o||(o='utf8');for(var s=!1;;)switch(o){case'hex':return w(this,e,t,n);case'utf8':case'utf-8':return v(this,e,t,n);case'ascii':return P(this,e,t,n);case'latin1':case'binary':return T(this,e,t,n);case'base64':return F(this,e,t,n);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return R(this,e,t,n);default:if(s)throw new TypeError('Unknown encoding: '+o);o=(''+o).toLowerCase(),s=!0;}},u.prototype.toJSON=function(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)}};var ne=4096;u.prototype.slice=function(e,t){var n=this.length;e=~~e,t=t===void 0?n:~~t,0>e?(e+=n,0>e&&(e=0)):e>n&&(e=n),0>t?(t+=n,0>t&&(t=0)):t>n&&(t=n),t<e&&(t=e);var o;if(u.TYPED_ARRAY_SUPPORT)o=this.subarray(e,t),o.__proto__=u.prototype;else{var r=t-e;o=new u(r,void 0);for(var s=0;s<r;++s)o[s]=this[s+e]}return o},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var o=this[e],r=1,s=0;++s<t&&(r*=256);)o+=this[e+s]*r;return o},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var o=this[e+--t],r=1;0<t&&(r*=256);)o+=this[e+--t]*r;return o},u.prototype.readUInt8=function(e,t){return t||U(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||U(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||U(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||U(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||U(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var r=this[e],s=1,l=0;++l<t&&(s*=256);)r+=this[e+l]*s;return s*=128,r>=s&&(r-=o(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var r=t,s=1,i=this[e+--r];0<r&&(s*=256);)i+=this[e+--r]*s;return s*=128,i>=s&&(i-=o(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||U(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||U(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||U(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||U(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||U(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||U(e,4,this.length),ee.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||U(e,4,this.length),ee.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||U(e,8,this.length),ee.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||U(e,8,this.length),ee.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var s=o(2,8*n)-1;Y(this,e,t,n,s,0)}var l=1,a=0;for(this[t]=255&e;++a<n&&(l*=256);)this[t+a]=255&e/l;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var s=o(2,8*n)-1;Y(this,e,t,n,s,0)}var l=n-1,i=1;for(this[t+l]=255&e;0<=--l&&(i*=256);)this[t+l]=255&e/i;return t+n},u.prototype.writeUInt8=function(e,t,o){return e=+e,t|=0,o||Y(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=n(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):D(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var s=o(2,8*n-1);Y(this,e,t,n,s-1,-s)}var l=0,i=1,a=0;for(this[t]=255&e;++l<n&&(i*=256);)0>e&&0==a&&0!==this[t+l-1]&&(a=1),this[t+l]=255&(e/i>>0)-a;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var s=o(2,8*n-1);Y(this,e,t,n,s-1,-s)}var l=n-1,i=1,a=0;for(this[t+l]=255&e;0<=--l&&(i*=256);)0>e&&0==a&&0!==this[t+l+1]&&(a=1),this[t+l]=255&(e/i>>0)-a;return t+n},u.prototype.writeInt8=function(e,t,o){return e=+e,t|=0,o||Y(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=n(e)),0>e&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):D(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||Y(this,e,t,4,2147483647,-2147483648),0>e&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return z(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return z(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,o){if(n||(n=0),o||0===o||(o=this.length),t>=e.length&&(t=e.length),t||(t=0),0<o&&o<n&&(o=n),o===n)return 0;if(0===e.length||0===this.length)return 0;if(0>t)throw new RangeError('targetStart out of bounds');if(0>n||n>=this.length)throw new RangeError('sourceStart out of bounds');if(0>o)throw new RangeError('sourceEnd out of bounds');o>this.length&&(o=this.length),e.length-t<o-n&&(o=e.length-t+n);var r,s=o-n;if(this===e&&n<t&&t<o)for(r=s-1;0<=r;--r)e[r+t]=this[r+n];else if(1e3>s||!u.TYPED_ARRAY_SUPPORT)for(r=0;r<s;++r)e[r+t]=this[r+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},u.prototype.fill=function(e,t,n,o){if('string'==typeof e){if('string'==typeof t?(o=t,t=0,n=this.length):'string'==typeof n&&(o=n,n=this.length),1===e.length){var r=e.charCodeAt(0);256>r&&(e=r)}if(void 0!==o&&'string'!=typeof o)throw new TypeError('encoding must be a string');if('string'==typeof o&&!u.isEncoding(o))throw new TypeError('Unknown encoding: '+o)}else'number'==typeof e&&(e&=255);if(0>t||this.length<t||this.length<n)throw new RangeError('Out of range index');if(n<=t)return this;t>>>=0,n=n===void 0?this.length:n>>>0,e||(e=0);var s;if('number'==typeof e)for(s=t;s<n;++s)this[s]=e;else{var i=u.isBuffer(e)?e:J(new u(e,o).toString()),l=i.length;for(s=0;s<n-t;++s)this[s+t]=i[s%l]}return this};var oe=/[^+\/0-9A-Za-z-_]/g}).call(this,s(3))},function(e,t){'use strict';function n(e){var t=e.length;if(0<t%4)throw new Error('Invalid string. Length must be a multiple of 4');var n=e.indexOf('=');-1===n&&(n=t);var o=n===t?0:4-n%4;return[n,o]}function o(e,t,n){return 3*(t+n)/4-n}function r(e){return l[63&e>>18]+l[63&e>>12]+l[63&e>>6]+l[63&e]}function s(e,t,n){for(var o,s=[],l=t;l<n;l+=3)o=(16711680&e[l]<<16)+(65280&e[l+1]<<8)+(255&e[l+2]),s.push(r(o));return s.join('')}t.byteLength=function(e){var t=n(e),o=t[0],r=t[1];return 3*(o+r)/4-r},t.toByteArray=function(e){var t,r,s=n(e),i=s[0],l=s[1],p=new u(o(e,i,l)),d=0,c=0<l?i-4:i;for(r=0;r<c;r+=4)t=a[e.charCodeAt(r)]<<18|a[e.charCodeAt(r+1)]<<12|a[e.charCodeAt(r+2)]<<6|a[e.charCodeAt(r+3)],p[d++]=255&t>>16,p[d++]=255&t>>8,p[d++]=255&t;return 2===l&&(t=a[e.charCodeAt(r)]<<2|a[e.charCodeAt(r+1)]>>4,p[d++]=255&t),1===l&&(t=a[e.charCodeAt(r)]<<10|a[e.charCodeAt(r+1)]<<4|a[e.charCodeAt(r+2)]>>2,p[d++]=255&t>>8,p[d++]=255&t),p},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,r=[],a=16383,u=0,i=n-o;u<i;u+=a)r.push(s(e,u,u+a>i?i:u+a));return 1==o?(t=e[n-1],r.push(l[t>>2]+l[63&t<<4]+'==')):2==o&&(t=(e[n-2]<<8)+e[n-1],r.push(l[t>>10]+l[63&t>>4]+l[63&t<<2]+'=')),r.join('')};for(var l=[],a=[],u='undefined'==typeof Uint8Array?Array:Uint8Array,p='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',d=0,i=p.length;d<i;++d)l[d]=p[d],a[p.charCodeAt(d)]=d;a[45]=62,a[95]=63},function(e,r){r.read=function(t,n,r,l,a){var u,e,p=8*a-l-1,c=(1<<p)-1,f=c>>1,g=-7,h=r?a-1:0,i=r?-1:1,d=t[n+h];for(h+=i,u=d&(1<<-g)-1,d>>=-g,g+=p;0<g;u=256*u+t[n+h],h+=i,g-=8);for(e=u&(1<<-g)-1,u>>=-g,g+=l;0<g;e=256*e+t[n+h],h+=i,g-=8);if(0===u)u=1-f;else{if(u===c)return e?NaN:(d?-1:1)*Infinity;e+=o(2,l),u-=f}return(d?-1:1)*e*o(2,u-l)},r.write=function(r,l,a,u,p,f){var g,h,m,c=8*f-p-1,_=(1<<c)-1,y=_>>1,C=23===p?5.960464477539063e-8-6.617444900424222e-24:0,b=u?0:f-1,i=u?1:-1,d=0>l||0===l&&0>1/l?1:0;for(l=t(l),isNaN(l)||l===Infinity?(h=isNaN(l)?1:0,g=_):(g=n(Math.log(l)/Math.LN2),1>l*(m=o(2,-g))&&(g--,m*=2),l+=1<=g+y?C/m:C*o(2,1-y),2<=l*m&&(g++,m/=2),g+y>=_?(h=0,g=_):1<=g+y?(h=(l*m-1)*o(2,p),g+=y):(h=l*o(2,y-1)*o(2,p),g=0));8<=p;r[a+b]=255&h,b+=i,h/=256,p-=8);for(g=g<<p|h,c+=p;0<c;r[a+b]=255&g,b+=i,g/=256,c-=8);r[a+b-i]|=128*d}},function(e){var t={}.toString;e.exports=Array.isArray||function(e){return'[object Array]'==t.call(e)}},function(e){e.exports={NOT_CONNECTED:{status:'error',description:'There is no socket connection available.'},CONNECTION_ERROR:{status:'error',description:'Connection error.'},SOCKET_EXCEPTION:{status:'error',description:'An exception occurred from the underlying WebSocket.'},AUTH_NOT_REQUIRED:{status:'ok',description:'Authentication is not required.'},REQUEST_TYPE_NOT_SPECIFIED:{status:'error',description:'No request type specified.'},ARGS_NOT_SPECIFIED:{status:'error',description:'No arguments specified.'},ARGS_NOT_OBJECT:{status:'error',description:'The supplied arguments parameter is not an object.'},init(){for(const e in this)({}).hasOwnProperty.call(this,e)&&(this[e].code=e,'error'!==this[e].status||this[e].error||(this[e].error=this[e].description));return delete this.init,this}}.init()},function(e,t,n){(function(o){t.formatArgs=function(t){if(t[0]=(this.useColors?'%c':'')+this.namespace+(this.useColors?' %c':' ')+t[0]+(this.useColors?'%c ':' ')+'+'+e.exports.humanize(this.diff),!this.useColors)return;const n='color: '+this.color;t.splice(1,0,n,'color: inherit');let o=0,r=0;t[0].replace(/%[a-zA-Z%]/g,(e)=>{'%%'===e||(o++,'%c'===e&&(r=o))}),t.splice(r,0,n)},t.save=function(e){try{e?t.storage.setItem('debug',e):t.storage.removeItem('debug')}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem('debug')}catch(e){}return!e&&'undefined'!=typeof o&&'env'in o&&(e=o.env.DEBUG),e},t.useColors=function(){return'undefined'!=typeof window&&window.process&&('renderer'===window.process.type||window.process.__nwjs)||('undefined'!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:'undefined'!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||'undefined'!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||'undefined'!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&31<=parseInt(RegExp.$1,10)||'undefined'!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'))}})(),t.colors=['#0000CC','#0000FF','#0033CC','#0033FF','#0066CC','#0066FF','#0099CC','#0099FF','#00CC00','#00CC33','#00CC66','#00CC99','#00CCCC','#00CCFF','#3300CC','#3300FF','#3333CC','#3333FF','#3366CC','#3366FF','#3399CC','#3399FF','#33CC00','#33CC33','#33CC66','#33CC99','#33CCCC','#33CCFF','#6600CC','#6600FF','#6633CC','#6633FF','#66CC00','#66CC33','#9900CC','#9900FF','#9933CC','#9933FF','#99CC00','#99CC33','#CC0000','#CC0033','#CC0066','#CC0099','#CC00CC','#CC00FF','#CC3300','#CC3333','#CC3366','#CC3399','#CC33CC','#CC33FF','#CC6600','#CC6633','#CC9900','#CC9933','#CCCC00','#CCCC33','#FF0000','#FF0033','#FF0066','#FF0099','#FF00CC','#FF00FF','#FF3300','#FF3333','#FF3366','#FF3399','#FF33CC','#FF33FF','#FF6600','#FF6633','#FF9900','#FF9933','#FFCC00','#FFCC33'],t.log=logIt||console.debug||console.log||(()=>{}),e.exports=n(17)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return'[UnexpectedJSONParseError]: '+e.message}}}).call(this,n(16))},function(e){function t(){throw new Error('setTimeout has not been defined')}function n(){throw new Error('clearTimeout has not been defined')}function o(e){if(u===setTimeout)return setTimeout(e,0);if((u===t||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}function r(e){if(p===clearTimeout)return clearTimeout(e);if((p===n||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function s(){g&&c&&(g=!1,c.length?f=c.concat(f):h=-1,f.length&&l())}function l(){if(!g){var e=o(s);g=!0;for(var t=f.length;t;){for(c=f,f=[];++h<t;)c&&c[h].run();h=-1,t=f.length}c=null,g=!1,r(e)}}function a(e,t){this.fun=e,this.array=t}function i(){}var u,p,d=e.exports={};(function(){try{u='function'==typeof setTimeout?setTimeout:t}catch(n){u=t}try{p='function'==typeof clearTimeout?clearTimeout:n}catch(t){p=n}})();var c,f=[],g=!1,h=-1;d.nextTick=function(e){var t=Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new a(e,t)),1!==f.length||g||o(l)},a.prototype.run=function(){this.fun.apply(null,this.array)},d.title='browser',d.browser=!0,d.env={},d.argv=[],d.version='',d.versions={},d.on=i,d.addListener=i,d.once=i,d.off=i,d.removeListener=i,d.removeAllListeners=i,d.emit=i,d.prependListener=i,d.prependOnceListener=i,d.listeners=function(){return[]},d.binding=function(){throw new Error('process.binding is not supported')},d.cwd=function(){return'/'},d.chdir=function(){throw new Error('process.chdir is not supported')},d.umask=function(){return 0}},function(e,n,o){e.exports=function(e){function n(e){function t(...e){if(!t.enabled)return;const r=t,s=+new Date,i=s-(o||s);r.diff=i,r.prev=o,r.curr=s,o=s,e[0]=n.coerce(e[0]),'string'!=typeof e[0]&&e.unshift('%O');let l=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(t,o)=>{if('%%'===t)return'%';l++;const s=n.formatters[o];if('function'==typeof s){const n=e[l];t=s.call(r,n),e.splice(l,1),l--}return t}),n.formatArgs.call(r,e);const a=r.log||n.log;a.apply(r,e)}let o,s,i,l=null;return t.namespace=e,t.useColors=n.useColors(),t.color=n.selectColor(e),t.extend=r,t.destroy=n.destroy,Object.defineProperty(t,'enabled',{enumerable:!0,configurable:!1,get:()=>{return null==l?(s!==n.namespaces&&(s=n.namespaces,i=n.enabled(e)),i):l},set:(e)=>{l=e}}),'function'==typeof n.init&&n.init(t),t}function r(e,t){const o=n(this.namespace+('undefined'==typeof t?':':t)+e);return o.log=this.log,o}function s(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,'*')}return n.debug=n,n.default=n,n.coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){const e=[...n.names.map(s),...n.skips.map(s).map((e)=>'-'+e)].join(',');return n.enable(''),e},n.enable=function(e){n.save(e),n.namespaces=e,n.names=[],n.skips=[];let t;const o=('string'==typeof e?e:'').split(/[\s,]+/),r=o.length;for(t=0;t<r;t++)o[t]&&(e=o[t].replace(/\*/g,'.*?'),'-'===e[0]?n.skips.push(new RegExp('^'+e.substr(1)+'$')):n.names.push(new RegExp('^'+e+'$')))},n.enabled=function(e){if('*'===e[e.length-1])return!0;let t,o;for(t=0,o=n.skips.length;t<o;t++)if(n.skips[t].test(e))return!1;for(t=0,o=n.names.length;t<o;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=o(18),n.destroy=function(){console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.')},Object.keys(e).forEach((t)=>{n[t]=e[t]}),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let o=0;for(let t=0;t<e.length;t++)o=(o<<5)-o+e.charCodeAt(t),o|=0;return n.colors[t(o)%n.colors.length]},n.enable(n.load()),n}},function(e){function n(e){if(e+='',!(100<e.length)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var o=parseFloat(t[1]),n=(t[2]||'ms').toLowerCase();return'years'===n||'year'===n||'yrs'===n||'yr'===n||'y'===n?o*c:'weeks'===n||'week'===n||'w'===n?o*d:'days'===n||'day'===n||'d'===n?o*p:'hours'===n||'hour'===n||'hrs'===n||'hr'===n||'h'===n?o*u:'minutes'===n||'minute'===n||'mins'===n||'min'===n||'m'===n?o*s:'seconds'===n||'second'===n||'secs'===n||'sec'===n||'s'===n?o*a:'milliseconds'===n||'millisecond'===n||'msecs'===n||'msec'===n||'ms'===n?o:void 0}}}function o(e){var n=t(e);return n>=p?l(e/p)+'d':n>=u?l(e/u)+'h':n>=s?l(e/s)+'m':n>=a?l(e/a)+'s':e+'ms'}function r(e){var n=t(e);return n>=p?i(e,n,p,'day'):n>=u?i(e,n,u,'hour'):n>=s?i(e,n,s,'minute'):n>=a?i(e,n,a,'second'):e+' ms'}function i(e,t,o,n){return l(e/o)+' '+n+(t>=1.5*o?'s':'')}var l=Math.round,a=1e3,s=60*a,u=60*s,p=24*u,d=7*p,c=365.25*p;e.exports=function(e,t){t=t||{};var s=typeof e;if('string'==s&&0<e.length)return n(e);if('number'==s&&isFinite(e))return t.long?r(e):o(e);throw new Error('val is not a non-empty string or a valid number. val='+JSON.stringify(e))}},function(e){e.exports=function(e,t,n){n&&n.stack?e(`${t}\n %O`,n.stack):'object'==typeof n?e(`${t} %o`,n):e(`${t} %s`,n)}}])});

</script>
  <script src="https://cdn.jsdelivr.net/npm/@shopify/draggable@1.0.0-beta.11/lib/draggable.bundle.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js" integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js" integrity="sha256-yr4fRk/GU1ehYJPAs8P4JlTgu0Hdsp4ZKrx8bDEDC3I=" crossorigin="anonymous"></script> 
  <script src="https://cdn.jsdelivr.net/npm/obs-websocket-js@4.0.2/dist/obs-websocket.js"></script>
  </html>